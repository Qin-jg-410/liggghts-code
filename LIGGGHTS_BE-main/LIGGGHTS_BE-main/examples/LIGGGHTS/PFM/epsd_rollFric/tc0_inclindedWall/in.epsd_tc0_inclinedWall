#########################################################################################
# title: in.epsd_tc0_inclinedWall                                                       #
# additional files:                                                                     #
# date: May 2013                                                                        #
# authors: Aigner, A. (original version Kerbel, J.)                                     #
# e-mail: andreas.aigner@jku.at                                                         #
# short description: Testcase #0 for the EPSD rolling friction model                    #
#  determination of the coefficient of rolling friction for a given target angle of     #
#  an inclined wall relative to the horizontal                                          #
#########################################################################################


#########################################################################################
#                               user defined settings: settings                         #
#########################################################################################
variable    rad     equal       5e-3            # particle radius
variable    dens    equal       1056            # particle density
variable    ym      equal       40e6            # Young's modulus
variable    pr      equal       0.49            # Poisson ratio
variable    rest    equal       0.9             # coefficient of resitution
variable    fric    equal       0.8             # coefficient of friction
#variable    rf      equal       0.2             # coefficient of rolling friction
variable    rvisc   equal       0.0             # coefficient of rolling viscous damping
variable    dt      equal       1.0e-5          # time step width

variable    rfStyle string      epsd
variable    rfSLog  string      EPSD

#target angle in degrees
variable    targetAngle equal  4        # angle of the slope relative to the horizontal
variable    frf         equal  2.       # start value of rolling friction
variable    deltarf     equal  0.5      # start step size of rolling friction
variable    vyThresh    equal  10^-3		# y - vel threshold
variable    kin_en_thre equal  10^-12   # threshold kinetic energy

variable    i           loop   8			  # number of refinements, each refinement step size is divided by 5


#########################################################################################
#                               internal settings - do not touch                        #
#########################################################################################

variable    skin equal   0.5*${rad}

# dimensions of simulation domain
variable    nx  equal   -20*${rad}      # neg. x-value
variable    px  equal    60*${rad}     # pos. x-value
variable    ny  equal   -20*${rad}      # neg. y-value
variable    py  equal    100*${rad}     # pos. y-value
variable    nz  equal    0.0            # neg. z-value
variable    pz  equal    10*${rad}     # pos. z-value

variable    pins equal   3*${rad}       # height of the insertation region

# for particle insertation
variable    lat equal    2.01*${rad}
variable    dp  equal    2*${rad}
variable    aBox equal   9*${lat}*2     # with 9*2*${lat} 100 atoms are created

# timesteps
variable    dumpfreq   equal floor(1e-2/${dt})
variable    nStepsIter equal floor(1e-1/${dt})

# inclined wall
variable    gravy equal sin(${targetAngle}/180*PI)
variable    gravz equal -1*cos(${targetAngle}/180*PI)


#########################################################################################

atom_style	granular
atom_modify	map array
communicate	single vel yes
newton		off

boundary	f f f

units		si

region		reg block ${nx} ${px} ${ny} ${py} ${nz} ${pz} units box
create_box	1 reg

neighbor	${skin} bin
neigh_modify	delay 0

#Material properties required for granular pair styles
fix     m1 all property/global youngsModulus peratomtype ${ym}
fix     m2 all property/global poissonsRatio peratomtype ${pr}
fix     m3 all property/global coefficientRestitution peratomtypepair 1 ${rest}
fix     m4 all property/global coefficientFriction peratomtypepair 1 ${fric}
fix     m5 all property/global coefficientRollingFriction peratomtypepair 1 ${frf}
fix     m7 all property/global coefficientRollingViscousDamping peratomtypepair 1 ${rvisc}

#pair style
pair_style gran model hertz tangential history rolling_friction ${rfStyle}
pair_coeff	* *

#timestep
timestep	${dt}

#gravity (already reduced in order to avoid a strong particle repulsion)
fix		gravi all gravity 9.81 vector 0.0 0.0 ${gravz}

#walls
fix zwall all wall/gran model hertz tangential history rolling_friction ${rfStyle} primitive type 1 zplane ${nz}

#particle insertion
region    bc block 0 ${aBox} 0 ${aBox} 0. ${lat} units box
lattice   custom ${lat} a1 2 0 0 a2 0 2 0 a3 0 0 1 basis 0 0 0.5
create_atoms  1 region bc
set       group all density ${dens}
set       group all diameter ${dp}

#apply integration
fix		    integr all nve/sphere

#check timestep
fix       ts all check/timestep/gran ${dumpfreq} 0.2 0.2

#screen output
compute		    cero all erotate/sphere
compute       cke all ke
thermo_style	custom step atoms ke c_cke c_cero f_ts[1] f_ts[2] cpu
thermo		    ${dumpfreq}
thermo_modify	lost ignore norm no
compute_modify	thermo_temp dynamic yes

#insert the first particles so that dump is not empty
run		  1
dump		dmp all custom ${dumpfreq} ./post/dump_*.liggghts id type x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz radius

run     ${dumpfreq}

#run particle relaxation - check kinetic energy
variable ke equal c_cke
print "ke ${ke}"

label loop
  print "-----> Checking Kinetic Energy..."
  if "${ke} < ${kin_en_thre}" then "jump in.epsd_tc0_inclinedWall endloop"
  print "-----> ke ${ke}, ke_threshold ${kin_en_thre}, continuing run"  
  run ${nStepsIter}
jump in.epsd_tc0_inclinedWall loop
label endloop


# change gravitation vector to desired angle
unfix gravi
fix gravi all gravity 9.81 vector 0.0 ${gravy} ${gravz}

velocity all zero linear
velocity all zero angular

run ${nStepsIter}

# again relax particles
label loop2
  print "-----> Checking Kinetic Energy... second time"
  if "${ke} < ${kin_en_thre}" then "jump in.epsd_tc0_inclinedWall endloop2"
  print "-----> ke ${ke}, ke_threshold ${kin_en_thre}, continuing run"  
  run ${nStepsIter}
jump in.epsd_tc0_inclinedWall loop2
label endloop2

# start iteration of rolling friction $frf

compute  vysum all reduce sum vy
variable nPart equal atoms
variable vely equal c_vysum/${nPart} #${nParticles}

label rfLoop
  if "${i} > 7" then "jump in.epsd_tc0_inclinedWall endrfLoop"
  variable frf equal ${frf}-${deltarf}

  if "${frf} < 0" then "jump in.epsd_tc0_inclinedWall endrfLoop"

  unfix m5
  fix   m5 all property/global coefficientRollingFriction peratomtypepair 1 ${frf}

  run ${nStepsIter} every ${nStepsIter} "print 'velocity = ${vely}'"
  
  if "${vely} < ${vyThresh}" then "jump in.epsd_tc0_inclinedWall elseLbl"

    print "mean y velocity is ${vely} and trashold is ${vyThresh}"
    print "particles rolling -> RELOAD at rf ${frf}+${deltarf}"
    variable frf equal ${frf}+${deltarf}
    variable deltarf equal ${deltarf}/5.
    velocity all zero linear
    velocity all zero angular
    next i
  jump in.epsd_tc0_inclinedWall rfLoop
  
  label elseLbl
    print "mean y velocity is ${vely}"
    print "particles not rolling, continuing run at rf ${frf}-${deltarf}"
    velocity all zero linear
    velocity all zero angular
  
 jump in.epsd_tc0_inclinedWall rfLoop



label endrfLoop

print "final rf ${frf}"
fix DumpText all print 1 "final coefficient of rolling friction: ${frf}" screen no title "" file post/rollFric.txt
run 1

