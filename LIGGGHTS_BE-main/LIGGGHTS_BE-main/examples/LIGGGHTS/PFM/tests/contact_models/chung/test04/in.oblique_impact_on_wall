################################################################################
# brief: Oblique impact of a sphere with a rigid plane with a constant         #
# resultant velocity but at different incident angles                          #
#                                                                              #
# Check the tangential force calculation between a sphere and a plane          #
# Cf. Test No.4 by Chung and Ooi, Granul. Matter 13, 643–656 (2011)            #
# The sphere has an inital velocity of 3.9 m/s, no initial angular velocity    #
# and an impact angle Theta [5°,85°]                                           #
#                                                                              #
# The simulation outputs the rebound angular velocity, tangential coefficient  #
# of restitution, rebound angle at the com and at the contact point as a       #
# function of the impact angle.                                                #
# The script accepts:                                                          #
# the normal model in the input variable NORMALMODEL,                          #
# the tangential model in                TANGENTIALMODEL,                      #
# an optional model option in            MODELOPTION,                          #
# with model option setting in           MODELOPTIONSETTING,                   #
# the Young's modulus in                 YOUNG                                 #
# the Poisson's ratio in                 POISSON                               #
# the particle density in                DENSITY                               #
#                                                                              #
# authors: Daniel Queteschiner                                                 #
# date: Aug 2019                                                               #
# copyright: 2019- JKU Linz                                                    #
################################################################################

variable NORMALMODEL        index hertz
variable TANGENTIALMODEL    index history
variable MODELOPTION        index limitForce
variable MODELOPTIONSETTING index off
# Al. oxide # Al. alloy
# Note: a perfectly rigid plane is  assumed in this test which means that the
#       plane has an infinite Young's modulus; for proper calculation of the
#       _effective_ Young's modulus of the contact, we instead use twice the
#       reference value of the Young's modulus and the same Poisson's ratio
#       for the sphere and the plane!
variable YOUNG              index 7.6e11 # 1.4e11 # ref. values: 3.8e11, 7.0e10
variable POISSON            index 0.23   # 0.33
variable DENSITY            index 4000   # 2700

# remove old output file
shell rm -f post/${NORMALMODEL}_rebound_properties.txt

label startloop
# impact angles
variable anglevariations uloop 17
variable Theta universe 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85

# define the attributes associated with the particles,
# 'granular' (or 'sphere') style uses diameter, mass and angular velocity
atom_style      granular

# use an array to map particle IDs to local storage index,
# do not sort atoms spatially
atom_modify     map array sort 0 0

# set simulation domain to be fixed in x y z
boundary        f f f

# save communication by turning off Newton's 3rd law for pairwise interaction,
# note: this setting only influences communication between procs, Newton's
# 3rd law is still used for contact force calculations
newton          off

# use a single value for ghost particle cutoff distance and
# enable velocity to be communicated with ghost particles
communicate     single vel yes

# set unit system to SI
units           si

# define the region used as simulation domain (min/max X, min/max Y, min/max Z)
region          domain block -0.1 0.1 -0.1 0.1 -0.1 0.1 units box

# create the simulation domain and 1 material type for particles and walls
create_box      1 domain

# specify the skin distance for neighbor list generation
neighbor        0.001 bin
neigh_modify    delay 0

variable deg2rad         equal  PI/180. # factor to convert degrees to radians
variable vel             equal  3.9 # impact velocity (m/s)
variable vely            equal  ${vel}*sin(${deg2rad}*${Theta}) # tangential
variable velz            equal -${vel}*cos(${deg2rad}*${Theta}) # normal

variable normalModel     string ${NORMALMODEL}
variable tangentialModel string ${TANGENTIALMODEL}

# particle size and density
variable rad             equal  0.0025 # 2.5 mm
variable dia             equal  2*${rad}
variable dens            equal  ${DENSITY} # kg/m3

# define the material properties required for granular pair styles
variable Young           equal  ${YOUNG} # N/m2
variable Poisson         equal  ${POISSON}
variable coeffRes        equal  0.98
variable coeffFric       equal  0.092

fix     m1 all property/global youngsModulus peratomtype ${Young}
fix     m2 all property/global poissonsRatio peratomtype ${Poisson}
fix     m3 all property/global coefficientRestitution peratomtypepair 1 ${coeffRes}
fix     m4 all property/global coefficientFriction peratomtypepair 1 ${coeffFric}
fix     m5 all property/global characteristicVelocity scalar ${vel}

# specify contact model to use
pair_style gran model ${normalModel} tangential ${tangentialModel} ${MODELOPTION} ${MODELOPTIONSETTING}
pair_coeff * *

# set the time step
timestep        0.00000002

# create a single particle of type 1 at the given position
# by default particles are assigned to a group named 'all'
create_atoms    1 single -0.0025 -0.0025 0.0025 units box

# set diameter, density and initial velocity of created particle
set             atom 1 diameter ${dia} density ${dens} vy ${vely} vz ${velz}

# define the meshes used for walls
# note that meshes must not exceed the domain boundaries
fix mesh_bottom all mesh/surface file meshes/zplane.stl type 1

# use the mesh defined above as wall; note that specifying the wall contact
# model is analogous to the pair_style command; there can only be a single fix
# of style 'wall/gran' for mesh based walls
fix mesh_walls all wall/gran model ${normalModel} tangential ${tangentialModel} &
    mesh n_meshes 1 meshes mesh_bottom ${MODELOPTION} ${MODELOPTIONSETTING}

# use constant NVE integration to update position, velocity and angular velocity
fix integr all nve/sphere

# check time step size
fix ts_check all check/timestep/gran 1 0.1 0.1

# compute rotational kinetic energy
compute rke all erotate/sphere

# output settings, include kinetic energy
thermo_style    custom step atoms ke c_rke

# set frequency of output
thermo          200

# ignore particles leaving the simulation domain,
# do not normalize thermodynamic output values by the number of atoms
thermo_modify   lost ignore norm no

# set dynamic 'to' no as number of particles does not change
# for a single particle we need to set extra dof to 0 to obtain correct ke
compute_modify  thermo_temp dynamic no extra 0

run     1
unfix   ts_check

# run 20000 time steps
run     20000

# tangential coefficient of restitution at com
variable tcr equal vy[1]/${vely}
# lower bound for tcr
variable tcrlimit equal 1.0-${coeffFric}*(1+${coeffRes})*tan(${deg2rad}*(90-${Theta}))
# rebound angular velocity
variable rav equal omegax[1]
# lower bound for rav
variable ravlimit equal -2.5*${coeffFric}*(1+${coeffRes})*${vel}*cos(${deg2rad}*(${Theta}))/${rad}
# rebound angle center of mass
variable rphicom equal atan(vy[1]/vz[1])/${deg2rad}
# rebound angle contact point
variable rphi equal atan((vy[1]+${rad}*omegax[1])/vz[1])/${deg2rad}
# rebound angle contact point
variable rphilimit equal atan((tan(${deg2rad}*${Theta})-3.5*${coeffFric}*(1+${coeffRes}))/${coeffRes})/${deg2rad}

fix     output all print 1 "${Theta} ${tcr} ${tcrlimit} ${rav} ${ravlimit} ${rphicom} ${rphi} ${rphilimit}" title "none" &
        append post/${NORMALMODEL}_rebound_properties.txt
run     1

next    anglevariations Theta
clear
jump    SELF startloop

