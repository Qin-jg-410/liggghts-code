################################################################################
# brief: Impact of two identical spheres with a constant normal velocity and   #
# varying angular velocities                                                   #
#                                                                              #
# Check the tangential force calculation between two spheres                   #
# Cf. Test No.7 by Chung and Ooi, Granul. Matter 13, 643â€“656 (2011)            #
# The spheres have an inital velocity of 0.2 m/s and an initial angular        #
# velocity [0.175,21] rad/s                                                    #
#                                                                              #
# The simulation outputs the pre- and post-collisional angular velocities and  #
# the post-collisional tangential velocity at the com                          #
# The script accepts:                                                          #
# the normal model in the input variable NORMALMODEL,                          #
# the tangential model in                TANGENTIALMODEL,                      #
# an optional model option in            MODELOPTION,                          #
# with model option setting in           MODELOPTIONSETTING,                   #
# the Young's modulus in                 YOUNG                                 #
# the Poisson's ratio in                 POISSON                               #
# the particle density in                DENSITY                               #
#                                                                              #
# authors: Daniel Queteschiner                                                 #
# date: Aug 2019                                                               #
# copyright: 2019- JKU Linz                                                    #
################################################################################

variable NORMALMODEL        index hertz
variable TANGENTIALMODEL    index history
variable MODELOPTION        index limitForce
variable MODELOPTIONSETTING index off
# Al. alloy # copper
variable YOUNG              index 7e10 # 1.2e11
variable POISSON            index 0.33 # 0.35
variable DENSITY            index 2700 # 8900

# remove old output file
shell rm -f post/${NORMALMODEL}_rebound_properties.txt

label startloop
# angular velocities
variable omegaxvariations uloop 20
variable omegaxvar universe 0.175 0.30 0.42 0.60 0.80 1.0 1.2 1.5 2.0 2.4 2.8 &
                            3.0 3.5 4.0 6.0 8.0 10.0 12.0 14.0 21.0

# define the attributes associated with the particles,
# 'granular' (or 'sphere') style uses diameter, mass and angular velocity
atom_style      granular

# use an array to map particle IDs to local storage index,
# do not sort atoms spatially
atom_modify     map array sort 0 0

# set simulation domain to be fixed in x y z
boundary        f f f

# save communication by turning off Newton's 3rd law for pairwise interaction,
# note: this setting only influences communication between procs, Newton's
# 3rd law is still used for contact force calculations
newton          off

# use a single value for ghost particle cutoff distance and
# enable velocity to be communicated with ghost particles
communicate     single vel yes

# set unit system to SI
units           si

# define the region used as simulation domain (min/max X, min/max Y, min/max Z)
region          domain block -0.3 0.3 -0.3 0.3 -0.3 0.3 units box

# create the simulation domain and 1 material type for particles and walls
create_box      1 domain

# specify the skin distance for neighbor list generation
neighbor        0.001 bin
neigh_modify    delay 0

variable vel1            equal -0.2 # (m/s)
variable vel2            equal  0.2 # (m/s)
variable velchar         equal  0.4 # impact velocity (m/s)

variable normalModel     string ${NORMALMODEL} # hertz or hooke
variable tangentialModel string ${TANGENTIALMODEL}

# particle size and density
variable rad             equal  0.1 # 100 mm
variable dia             equal  2*${rad}
variable dens            equal  ${DENSITY} # kg/m3

# define the material properties required for granular pair styles
variable Young           equal  ${YOUNG} # N/m2
variable Poisson         equal  ${POISSON}
variable coeffRes        equal  0.5
variable coeffFric       equal  0.4

fix     m1 all property/global youngsModulus peratomtype ${Young}
fix     m2 all property/global poissonsRatio peratomtype ${Poisson}
fix     m3 all property/global coefficientRestitution peratomtypepair 1 ${coeffRes}
fix     m4 all property/global coefficientFriction peratomtypepair 1 ${coeffFric}
fix     m5 all property/global characteristicVelocity scalar ${velchar}

# specify contact model to use
pair_style gran model ${normalModel} tangential ${tangentialModel} ${MODELOPTION} ${MODELOPTIONSETTING}
pair_coeff * *

# set the time step to ~1% of Rayleigh time
variable    dt equal 5e-7
timestep    ${dt}
print "timestep ${dt}"

# create two particles of type 1 at the given positions
# by default particles are assigned to a group named 'all'
create_atoms    1 single 0.0 0.0  0.1 units box
create_atoms    1 single 0.0 0.0 -0.1 units box
# set diameter, density and initial velocity of created particles
set             atom 1 diameter ${dia} density ${dens} vz ${vel1} omegax  ${omegaxvar}
set             atom 2 diameter ${dia} density ${dens} vz ${vel2} omegax -${omegaxvar}

# use constant NVE integration to update position, velocity and angular velocity
fix integr all nve/sphere

# check time step size
fix ts_check all check/timestep/gran 1 0.1 0.1

# compute rotational kinetic energy
compute rke all erotate/sphere

# output settings, include kinetic energy
thermo_style    custom step atoms ke c_rke

# set frequency of output
thermo          100

# ignore particles leaving the simulation domain,
# do not normalize thermodynamic output values by the number of atoms
thermo_modify   lost ignore norm no

# set dynamic 'to' no as number of particles does not change
compute_modify  thermo_temp dynamic no

# run 2500 time steps
run     2500

# angular rebound velocity
variable omegax1 equal omegax[1]
# tangential rebound velocity at the com
variable vy1 equal vy[1]

fix     output all print 1 "${omegaxvar} ${omegax1} ${vy1}" title "none" &
        append post/${NORMALMODEL}_rebound_properties.txt
run     1

next    omegaxvariations omegaxvar
clear
jump    SELF startloop

