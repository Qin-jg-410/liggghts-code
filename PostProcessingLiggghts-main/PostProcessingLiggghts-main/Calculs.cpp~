#include "Headers/Calculs.h"

/*Matrix Geometrie::cart2sph (Matrix cart)
{
Matrix sph(3,1) ; 
sph(1,1)=sqrt(cart(1,1)*cart(1,1)+cart(2,1)*cart(2,1)+cart(3,1)*cart(3,1)) ; 
sph(2,1)=acos(cart(3,1)/sph(1,1)) ;
if (cart(2,1)>=0)
   sph(3,1)=acos(cart(1,1)/sqrt(cart(1,1)*cart(1,1)+cart(2,1)*cart(2,1))) ; 
else
   sph(3,1)=2*M_PI-acos(cart(1,1)/sqrt(cart(1,1)*cart(1,1)+cart(2,1)*cart(2,1))) ; 
return sph ; 
}*/
Vector Geometrie::cart2sph (Vector cart)
{
Vector sph ; 
sph(1)=sqrt(cart(1)*cart(1)+cart(2)*cart(2)+cart(3)*cart(3)) ; 
sph(2)=acos(cart(3)/sph(1)) ;
if (cart(2)>=0)
   sph(3)=acos(cart(1)/sqrt(cart(1)*cart(1)+cart(2)*cart(2))) ; 
else
   sph(3)=2*M_PI-acos(cart(1)/sqrt(cart(1)*cart(1)+cart(2)*cart(2))) ; 
return sph ; 
}


Vector Geometrie::gravicentre (Vector pt1, Vector pt2, Vector pt3)
{
Vector *res= new Vector ;
(*res)=((pt1+pt2+pt3)/3.) ;
return (*res) ;
}
//------------------------------------------------------------
// Rotation avec Vecteur/Matrice et MatriceRotation => Resutat Vecteur/Matrice
Matrix Geometrie::rotation (Matrix vecteur, Matrix rotation) 
{ return rotation*vecteur ;}
Matrix3x3 Geometrie::rotation (Matrix3x3 mat, Matrix3x3 rotation) 
{ return rotation*mat ;}
Vector Geometrie::rotation (Vector vecteur, Matrix3x3 rotation) 
{ return rotation*vecteur ; }
//--------------------------------------------------------------------
// Rotation avec Vecteur/Matrice et angle + axe 
Matrix Geometrie::rotation (Matrix vecteur, double angle, Matrix axe) 
{
Matrix rot ; 
rot=Geometrie::get_rot_matrix(angle, axe) ; 
return Geometrie::rotation(vecteur, rot) ; 
}
Vector Geometrie::rotation (Vector vecteur, double angle, Vector axe) 
{
Matrix3x3 rot ; 
rot=Geometrie::get_rot_matrix(angle, axe) ; 
return Geometrie::rotation(vecteur, rot) ; 
}
Matrix3x3 Geometrie::rotation (Matrix3x3 vecteur, double angle, Vector axe) 
{
Matrix3x3 rot ; 
rot=Geometrie::get_rot_matrix(angle, axe) ; 
return Geometrie::rotation(vecteur, rot) ; 
}
//-------------------------------------------------------------
// Rotations d'axe Z
Matrix Geometrie::rotation_axeZ (Matrix vecteur, double angle) 
{
Matrix res ; 
Matrix axe(3,1) ; 
axe << 0.0 << 0.0 << 1.0 ; 
res=Geometrie::rotation(vecteur, angle, axe) ; 
return res;
}
Matrix3x3 Geometrie::rotation_axeZ (Matrix3x3 mat, double angle) 
{
Matrix3x3 res ; 
Vector axe(3) ; 
axe(1)=axe(2)=0 ; axe(3)=1 ; 
res=Geometrie::rotation(mat, angle, axe) ; 
return res;
}
Vector Geometrie::rotation_axeZ (Vector vec, double angle) 
{
Vector res ; 
Vector axe(3) ; 
axe(1)=axe(2)=0 ; axe(3)=1 ; 
res=Geometrie::rotation(vec, angle, axe) ; 
return res;
}
//---------------------------------------------------------------
double Geometrie::distance_cylindre (Cylindre & C, Vector x) 
{
 Vector x2, n_axe, contact ;
 double dst_axe, norm_axe ; int sgn ; 
 
 x2=x-C.centre ;
 dst_axe=x2.dot(C.axe) ; 
 if (dst_axe<0) {dst_axe=-dst_axe ; C.axe=-C.axe ; }
 n_axe=x2-(dst_axe*C.axe) ; 
 norm_axe=n_axe.norm() ; 
 
 
 if (norm_axe!=0)
    n_axe=n_axe/norm_axe ; 
 else
    n_axe=0 ; 
 
 if (dst_axe<C.L/2 && norm_axe<C.D/2) // inside
 {
   sgn=-1 ;
   if (dst_axe>(C.L/2-C.D/2) && (C.D/2-norm_axe)>(C.L/2-dst_axe))
     contact=(C.L/2)*C.axe + norm_axe*n_axe ;
   else
     contact=(C.D/2)*n_axe+dst_axe*C.axe ; 
 }
 else
 {
   sgn=1 ; 
   contact=n_axe*min(C.D/2, norm_axe)+C.axe*min(C.L/2, dst_axe) ; 
 } 
 x2=x2-contact ; 
 return (x2.norm()*sgn) ; 
}

//---------------------------------------------------------------
Vector Geometrie::contact_cylindre (Cylindre & C, Vector x) 
{
 Vector x2, n_axe, contact ;
 double dst_axe, norm_axe ; int sgn ; 
 
 x2=x-C.centre ;
 dst_axe=x2.dot(C.axe) ; 
 if (dst_axe<0) {dst_axe=-dst_axe ; C.axe=-C.axe ; }
 n_axe=x2-(dst_axe*C.axe) ; 
 norm_axe=n_axe.norm() ; 
 
 
 if (norm_axe!=0)
    n_axe=n_axe/norm_axe ; 
 else
    n_axe=0 ; 
 
 if (dst_axe<C.L/2 && norm_axe<C.D/2) // inside
 {
   sgn=-1 ;
   if (dst_axe>(C.L/2-C.D/2) && (C.D/2-norm_axe)>(C.L/2-dst_axe))
     contact=(C.L/2)*C.axe + norm_axe*n_axe ;
   else
     contact=(C.D/2)*n_axe+dst_axe*C.axe ; 
 }
 else
 {
   sgn=1 ; 
   contact=n_axe*min(C.D/2, norm_axe)+C.axe*min(C.L/2, dst_axe) ; 
 } 
 
 contact=C.centre+contact ; 
 return (contact) ; 
}

//-------------------------------------------------------
Matrix Geometrie::get_rot_matrix (double angle, Matrix axe)
{
Matrix rotation(3,3), utu(3,3), antisymu(3,3) ; 
IdentityMatrix Id(3) ; 

utu=axe*(axe.t()) ;
antisymu << 0.0       << -axe(3,1)  << axe(2,1)
         << axe(3,1)  << 0.0        << -axe(1,1)
         << -axe(2,1) << axe(1,1)   << 0.0 ;
rotation=utu+(Id-utu)*cos(angle)+antisymu*sin(angle);
return rotation ; 
}
//-------------------------------------------------------
Matrix3x3 Geometrie::get_rot_matrix (double angle, Vector axe)
{
Matrix3x3 rotation, utu, antisymu, cosine; 
Matrix3x3 Id("Id") ; 
Vector tmp ; 
tmp=axe.t() ; 
utu=axe.multiply(tmp) ;
antisymu(1,1)=antisymu(2,2)=antisymu(3,3)=0.0 ;
antisymu(1,2)=-axe(3) ; 
antisymu(1,3)=axe(2) ; 
antisymu(2,1)=axe(3) ; 
antisymu(3,1)=-axe(2) ; 
antisymu(2,3)=-axe(1) ; 
antisymu(3,2)=axe(1) ;
rotation=utu+(Id-utu)*cos(angle)+antisymu*sin(angle) ;
return rotation ; 
}
//==================================================
/*Matrix Calcul::cross_product (Matrix a, Matrix b)
{
Matrix res(3,1) ; 
res(1,1)=a(2,1)*b(3,1) - a(3,1)*b(2,1) ; 
res(2,1)=a(3,1)*b(1,1) - a(1,1)*b(3,1) ; 
res(3,1)=a(1,1)*b(2,1) - a(2,1)*b(1,1) ; 
return res ; 
}*/
Vector Calcul::cross_product (Vector a, Vector b)
{
Vector res(3) ; 
res(1)=a(2)*b(3) - a(3)*b(2) ; 
res(2)=a(3)*b(1) - a(1)*b(3) ; 
res(3)=a(1)*b(2) - a(2)*b(1) ; 
return res ;   
}

double Calcul::angle_0_2pi(double angle)
{
while (angle>2*M_PI) {angle-=2*M_PI ; }
while (angle<0) {angle+=2*M_PI ; }
return angle ;
}

//=================================================
void Fonction::gaussienne1D (double & res, const double & x, const double & sigma)
{
res=1/(sigma*sqrt(2*M_PI))*exp(-(x*x)/(2*sigma*sigma)) ;
}

void Fonction::creneau1D (double & res, const double & x, const double & w)
{
if (x<=-w/2 || x>w/2) {res=0 ; return ;}
else {res=1/w ; return ;}
}

void Fonction::gaussienne3D (double & res, const double & x, const double & w, double radius)
{
res=(1/(pow(M_PI,3./2.)*w*w*w)*exp(-(x/w)*(x/w))) ; 
}

void Fonction::gaussienne3D_multivariee (double & res, Vector &v, Vector &w, double radius )
{
double prefactor ; prefactor=1/(pow(M_PI,3./2.)*(w(1))*w(2)*w(3)) ;
res=(prefactor*exp(-(v(1)/w(1))*(v(1)/w(1))-(v(2)/w(2))*(v(2)/w(2))-(v(3)/w(3))*(v(3)/w(3)))) ; 
}

void Fonction::gaussienne3D (double & res, Vector &x, Vector &w, double radius) {double norme=Calcul::norm(x) ; Fonction::gaussienne3D(res, norme, w(1), radius) ; }

void Fonction::creneau3D (double & res, Vector &x, Vector &w, double radius)
{
double V=w(1)*w(2)*w(3) ;
if (x(1)>-w(1)/2. && x(1)<w(1)/2. && x(2)>-w(2)/2. && x(2)<w(2)/2. && x(3)>-w(3)/2. && x(3)<w(3)/2.) 
   {res=1/V ; return ;}
else {res=0 ; return ;} 
}

void Fonction::creneau3D_fin (double &res, Vector x, Vector w, double radius)
{
double V=w(1)*w(2)*w(3) ;
double d=radius*2 ;
x(1)=fabs(x(1)) ; x(2)=fabs(x(2)) ; x(3)=fabs(x(3)) ;
w=w/2. ;

if (x(1)<(w(1)-d) && x(2)<(w(2)-d) && x(3)<(w(3)-d)) // (1 cas) : complètement à l'intérieur
   {res=1/V ; return ;}
else if (x(1)>(w(1)+d) || x(2)>(w(2)+d) || x(3)>(w(3)+d)) //(19 cas) : complètement à l'extérieur
   {res=0 ; return ;}
else if ( (x(1)<(w(1)+d) && x(1)>w(1)-d) ^ (x(2)<(w(2)+d) && x(2)>w(2)-d) ^ (x(3)<(w(3)+d) && x(3)>w(3)-d) ) { return ;}  //(3 cas) : un seul plan de coupe
else if ( x(1)<(w(1)-d) ^ x(2)<(w(2)-d) ^ x(3)<w(3)-d ) {return ;} // (3 cas) : 2 plans de coupe
else {return ;}		// (1cas) : 3 plans de coupe

}

void Fonction::intersect_sphere (double & res, Vector &x, Vector &w, double radius)
{
double V=4/3.0*M_PI*w(1)*w(1)*w(1) ;
double xnorm=Calcul::norm(x) ;
double h1, h2, V1, V2, r1, r2, Vp ;

if (xnorm<w(1)-radius) {res=1/V ; return ; }
else if (xnorm>w(1)+radius) {res=0 ; return ; }
else
	{
	r1 = w(1) ; r2 = radius ;
	Vp=4/3.0*M_PI*r2*r2*r2 ;
	h1 = (r1*r1-r2*r2+xnorm*xnorm)/(2*xnorm) ;
	h2 = (r2*r2-r1*r1+xnorm*xnorm)/(2*xnorm) ;
	V1 = M_PI*(r1*r1*r1*2/3.0 - r1*r1*h1 + h1*h1*h1/3.0) ;
	V2 = M_PI*(r2*r2*r2*2/3.0 - r2*r2*h2 + h2*h2*h2/3.0) ;
	res=(V1+V2) / (Vp*V) ; return ;
	}
}
void Fonction::intersect_cercle (double & res, Vector &x, Vector &w, double radius)
{
double V=M_PI*w(1)*w(1) ;
double xnorm=Calcul::norm2D(x) ;
double h1, h2, V1, V2, r1, r2, Vp, theta1, theta2 ;

if (radius>w(1)) DISP_Warn("Attention : rayon trop grand pour le coarse !") ;
if (xnorm<fabs(w(1)-radius)) {res=1/V ; return ; }
else if (xnorm>w(1)+radius) {res=0 ; return ; }
else
	{
	r1 = w(1) ; r2 = radius ;
	Vp=M_PI*r2*r2 ;
	h1 = (r1*r1-r2*r2+xnorm*xnorm)/(2*xnorm) ;
	h2 = (r2*r2-r1*r1+xnorm*xnorm)/(2*xnorm) ;
	theta1 = acos (h1/r1) ; theta2 = acos (h2/r2) ;
	V1 = r1*r1*theta1-sin(theta1)*r1*h1 ;
	V2 = r2*r2*theta2-sin(theta2)*r2*h2 ;
	res=(V1+V2) / (Vp*V) ; return ;
	}
}
void Fonction::int_intersect_sphere (double & res , Vector &xa, Vector &xb, Vector &w)
{
cout << "ERR : int_intersect_sphere : NOT IMPLEMENTED YET" ;
}

void Fonction::int_gaussienne3D(double & res, Vector &xa, Vector &xb, Vector &w)
{
double normea=Calcul::norm(xa), normeb=Calcul::norm(xb), ra, rb ;
//Fonction::gaussienne3D(ra,normea, w(1), double radius) ; Fonction::gaussienne3D(rb, normeb, w(1), double radius) ;
//res=0.5*(ra+rb) ; 
DISP_Err("NOT IMPLEMENTED"); 
}

void Fonction::int_creneau3D (double & res, Vector &xa, Vector &xb, Vector &w)
{
Vector alpha ; 
Vector a,b,d, moins1, plus1, w2, delta ;
double V ; 

// Calcul du volume
moins1=-1 ; 
plus1=1 ; 
V=w(1)*w(2)*w(3) ; 
// Les deux sont dedans ? les deux sont dehors ?
w2=w/2. ; 
a=xa.div(w2) ;
b=xb.div(w2) ;
if (a>moins1 && a<plus1 && b>moins1 && b<plus1) {res=1/V ; return ;}
// C'est à cheval donc ...
else if (a>moins1 && a<plus1) // C'est xa qui est dans le cube, xb est en dehors
 {
  // Recherche du alpha qui coupe sur les bornes à +w/2
  delta=xb-xa ; 
  w2=w/2.-xa ;   
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  if (alpha(3)>=0 && alpha(3)<=1) {res=alpha(3)/V ; return ; }
  w2=-w/2.-xa ;   
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  if (alpha(3)>=0 && alpha(3)<=1) {res=alpha(3)/V ; return ; }
  cout << "INTCRENEAU3DERRA" << fflush(stdout) ; 
 }
else if (b>moins1 && b<plus1) // C'est xa qui est en dehors du cube, xb est dedans
 {
  delta=xa-xb ;
  // Recherche du alpha qui coupe sur les bornes à +w/2
  w2=w/2.-xb ;   
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  if (alpha(3)>=0 && alpha(3)<=1) {res=alpha(3)/V ; return ; }
  w2=-w/2.-xb ;   
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  if (alpha(3)>=0 && alpha(3)<=1) {res=alpha(3)/V ; return ; }    
  cout << "INTCRENEAU3DERRB" << fflush(stdout) ;
 } 
else
 {
   res=0 ; return ; 
 }
/*
alpha=d(1,1)/b(1,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(1,1)<0?(1-alpha):alpha) ; return ;}
alpha=d(2,1)/b(2,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(2,1)<0?(1-alpha):alpha) ;return ;}
alpha=d(3,1)/b(3,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(3,1)<0?(1-alpha):alpha) ; return ;}

d=-w/2.-xa ; 
alpha=d(1,1)/b(1,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(1,1)>0?(1-alpha):alpha) ; return ;}
alpha=d(2,1)/b(2,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(2,1)>0?(1-alpha):alpha) ;return ;}
alpha=d(3,1)/b(3,1) ; 
if (alpha>0 && alpha<1)
   {res=1/V*(b(3,1)>0?(1-alpha):alpha) ;return ;} 
b=(xb+xa)/2. ; 
if (b(1,1)<w(1,1)/2. && b(1,1)>-w(1,1)/2.)
   {res=1/V ; return ;}
else
   {res=0 ;return ;}*/
}

void Fonction::int_creneau2D (double & res, Vector &xa, Vector &xb, Vector &w)
{
Vector alpha ;
Vector a,b,d, moins1, plus1, w2, delta ;
double V ;

// Calcul du volume
moins1=-1 ;
plus1=1 ;
V=w(1)*w(2);
// Les deux sont dedans ? les deux sont dehors ?
w2=w/2. ;
a=xa.div(w2) ;
b=xb.div(w2) ;
if (a>moins1 && a<plus1 && b>moins1 && b<plus1) {res=1/V ; return ;}
// C'est à cheval donc ...
else if (a>moins1 && a<plus1) // C'est xa qui est dans le cube, xb est en dehors
 {
  // Recherche du alpha qui coupe sur les bornes à +w/2
  delta=xb-xa ;
  w2=w/2.-xa ;
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  w2=-w/2.-xa ;
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  cout << "INTCRENEAU2DERRA" << fflush(stdout) ;
 }
else if (b>moins1 && b<plus1) // C'est xa qui est en dehors du cube, xb est dedans
 {
  delta=xa-xb ;
  // Recherche du alpha qui coupe sur les bornes à +w/2
  w2=w/2.-xb ;
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  w2=-w/2.-xb ;
  alpha=w2.div(delta) ;
  if (alpha(1)>=0 && alpha(1)<=1) {res=alpha(1)/V ; return ; }
  if (alpha(2)>=0 && alpha(2)<=1) {res=alpha(2)/V ; return ; }
  cout << "INTCRENEAU2DERRB" << fflush(stdout) ;
 }
else
 {
   res=0 ; return ;
 }
}

//========================================================================================
//=======================Matrix et Vector=================================================
//-------------------------
Matrix3x3 Id("Id") ; 
//--------------
Matrix3x3::Matrix3x3() 
{for (i=0 ; i<9 ; i++) {dat[i]=0;} tmp=false; }
Matrix3x3::Matrix3x3(const char * str) 
{for (i=0 ; i<9 ; i++) {dat[i]=0;} if (!strcmp(str, "Id")) {dat[0]=dat[4]=dat[8]=1 ;} tmp=false ;}
//--------------
void Matrix3x3::disp(void) 
{for (i=0 ; i<9 ; i++) {cout << dat[i] ; cout << (i%3==2?"\n":" ") ; } cout << "\n" ; }
//--------------
/*void Matrix3x3::operator= (Matrix3x3 & m) 
{for (i=0 ; i<9 ; i++) {dat[i]=m[i];} }*/
//-------------
Matrix3x3 Matrix3x3::t (void) 
{
Matrix3x3 res;
res[0]=dat[0] ; res[1]=dat[3] ; res[2]=dat[6] ; 
res[3]=dat[1] ; res[4]=dat[4] ; res[5]=dat[7] ; 
res[6]=dat[2] ; res[7]=dat[5] ; res[8]=dat[8] ; 
res.tmp=true ; 
return res ; 
}
//--------------
Matrix3x3 Matrix3x3::operator+ (Matrix3x3 m)
{
 Matrix3x3 res ;
 for (i=0 ; i<9 ; i++)
 {res[i]=dat[i]+m[i] ; }
 res.tmp=true ; 
 return res ; 
}
//--------------
Matrix3x3 Matrix3x3::operator+ (double x)
{
 Matrix3x3 res ;
 for (i=0 ; i<9 ; i++)
 {res[i]=dat[i]+x ; }
 res.tmp=true ; 
 return res ; 
}
//---------------
Matrix3x3 Matrix3x3::operator- ()
{
 Matrix3x3 res ;
 for (i=0 ; i<9 ; i++)
 {res[i]=-dat[i] ; }
 res.tmp=true ; 
 return res ; 
}
//--------------
Matrix3x3 Matrix3x3::operator* (double x)
{
 Matrix3x3 res ;
 for (i=0 ; i<9 ; i++)
 {res[i]=dat[i]*x ; }
 res.tmp=true ; 
 return res ; 
}
//--------------
Matrix3x3 Matrix3x3::operator* (Matrix3x3 & m)
{
 Matrix3x3 res ;
 res[0]=dat[0]*m[0]+dat[1]*m[3]+dat[2]*m[6] ;
 res[1]=dat[0]*m[1]+dat[1]*m[4]+dat[2]*m[7] ;
 res[2]=dat[0]*m[2]+dat[1]*m[5]+dat[2]*m[8] ;
 res[3]=dat[3]*m[0]+dat[4]*m[3]+dat[5]*m[6] ;
 res[4]=dat[3]*m[1]+dat[4]*m[4]+dat[5]*m[7] ;
 res[5]=dat[3]*m[2]+dat[4]*m[5]+dat[5]*m[8] ;
 res[6]=dat[6]*m[0]+dat[7]*m[3]+dat[8]*m[6] ;
 res[7]=dat[6]*m[1]+dat[7]*m[4]+dat[8]*m[7] ;
 res[8]=dat[6]*m[2]+dat[7]*m[5]+dat[8]*m[8] ;
 res.tmp=true ; 
 return res ; 
}
//--------------
Matrix3x3 Matrix3x3::operator/ (double x)
{
 Matrix3x3 res ;
 for (i=0 ; i<9 ; i++)
 {res[i]=dat[i]/x ; }
 res.tmp=true ; 
 return res ; 
}
//--------------
/*Vector Matrix3x3::operator* (Vector & v) 
{
 if (v.iscol()==false) {cerr << "MATRIXERR : multiplication impossible matrix*line" ;}
 else
 {
  Vector res ; 
  res[0]=dat[0]*v[0]+dat[1]*v[1]+dat[2]*v[2] ; 
  res[1]=dat[3]*v[0]+dat[4]*v[1]+dat[5]*v[2] ; 
  res[2]=dat[6]*v[0]+dat[7]*v[1]+dat[8]*v[2] ;
  return res ; 
 }
 return v ;
}*/
//--------------
void Vector::disp(void) 
{if (iscol()) printf("%f\n%f\n%f\n\n",dat[0],dat[1],dat[2]) ;
 else printf("%f %f %f\n\n",dat[0],dat[1], dat[2]); }
//--------------
Vector operator* (Vector & v, Matrix3x3 & m)
{
 if (v.iscol()) {cerr << "MATRIXERR : multiplication impossible matrix*ligne" ;}
 else
 {
  Vector res(v);
  res[0]=v[0]*m[0]+v[1]*m[3]+v[2]*m[6] ;
  res[1]=v[0]*m[1]+v[1]*m[4]+v[2]*m[7] ;
  res[2]=v[0]*m[2]+v[1]*m[5]+v[2]*m[8] ;
  return res ; 
 }
 return 0 ;
}
//--------------
Vector operator* (Matrix3x3 & m, Vector & v)
{
 if (!v.iscol()) {cerr << "MATRIXERR : multiplication impossible matrix*ligne" ;}
 else
 {
  Vector res(v);
  res[0]=v[0]*m[0]+v[1]*m[1]+v[2]*m[2] ;
  res[1]=v[0]*m[3]+v[1]*m[4]+v[2]*m[5] ;
  res[2]=v[0]*m[6]+v[1]*m[7]+v[2]*m[8] ;
  return res ;
 }
 return 0 ;
}
//-------------
Matrix3x3 Vector::multiply (Vector & v)
{
 if (iscol()==false && v.iscol()==true) {cerr << "MATRIXERR : utiliser la fonction .dot() pour faire line*column\n" ;}
 else
 {
  Matrix3x3 res ; 
  res[0]=dat[0]*v[0] ;res[1]=dat[0]*v[1] ;res[2]=dat[0]*v[2] ;
  res[3]=dat[1]*v[0] ;res[4]=dat[1]*v[1] ;res[5]=dat[1]*v[2] ;
  res[6]=dat[2]*v[0] ;res[7]=dat[2]*v[1] ;res[8]=dat[2]*v[2] ;
  return res ; 
 }
 return 0 ;
}
//-----------
/*Vector Vector::operator% (Vector & v)
{
if (v.iscol()!=iscol()) {cerr <<"MATRIXERR:l'operateur % demande des vecteurs de même orientation (equivalent matlab .*)" ; }
else
 {
 Vector res; 
 if (v.iscol()==false) res.autochange() ; 
 res[0]=dat[0]*v[0] ;res[1]=dat[1]*v[1] ;res[2]=dat[2]*v[2] ;
 res.tmp=true ; 
 return res ; 
 }
}*/
//-----------
/*Vector Vector::operator/ (Vector & v)
{
if (v.iscol()!=iscol()) {cerr <<"MATRIXERR:l'operateur / demande des vecteurs de même orientation (equivalent matlab ./)" ; Vector v_null ; return v_null ; }
else
 {
 Vector res; 
 if (v.iscol()==false) res.autochange() ; 
 res[0]=dat[0]/v[0] ;res[1]=dat[1]/v[1] ;res[2]=dat[2]/v[2] ;
 res.tmp=true ; 
 return res ; 
 }
}
*/
