#ifndef MASTERH
#include "MasterHeader.h"

#else 
class Calcul ; 

//=================================================================
class Vector ;
class Matrix3x3 {
public :
  Matrix3x3() ;
  Matrix3x3(const char * str) ; 
  // Operateurs
    //Recherche
    double & operator() (int i, int j) {return dat[(i-1)*3+(j-1)] ;}
    double & operator[] (int i) {return dat[i] ;}
    //affectation
    //void operator= (Matrix3x3 & m) ; 
    void operator= (double x) {for (i=0 ; i<9 ; i++) dat[i]=x ;}
    // Addition
    Matrix3x3  operator+ (double x ) ;
    Matrix3x3  operator+ (Matrix3x3 m) ;
    // Soustraction et opposé
    Matrix3x3  operator- () ;
    Matrix3x3  operator- (double x) {return ((*this)+(-x));};    
    Matrix3x3  operator- (Matrix3x3 & m) {Matrix3x3 tmp=-m ; return ((*this)+(tmp)) ;}
    // Multiplication
    Matrix3x3  operator* (double x) ;
    Matrix3x3  operator* (Matrix3x3 & m) ;
    //Vector operator* (Vector & v) ;
    // Division
    Matrix3x3  operator/ (double x) ;    
  //Fonctions
  Matrix3x3  t (void) ; // transpose
  void disp (void) ; 
  
  bool tmp ;  
private :
  double dat[9] ; 
  int i ; 
} ;
//------------------------------------------------------------
/*OLD CLASS VECTOR class Vector {
public : 
  Vector() {dat[0]=dat[1]=dat[2]=0 ; iscolumn=true ; tmp=false ; } ; 
  // Operateurs
    //Recherche
    double & operator() (int i) {return dat[i-1] ;}
    double & operator[] (int i) {return dat[i] ;}
    //affectation
    void operator= (Vector & m) {dat[0]=m[0] ; dat[1]=m[1] ; dat[2]=m[2] ; iscolumn=m.iscol() ; };
    void operator= (double x) {dat[0]=dat[1]=dat[2]=x ; }; 
    // Addition
    Vector  operator+ (double x) ;
    Vector  operator+ (Vector & m) ;
    // Soustraction et opposé
    Vector  operator- () ;
    Vector  operator- (double x) {return ((*this)+(-x));};    
    Vector  operator- (Vector & m) {Vector tmp=-m ; return ((*this)+(tmp)) ;}
    // Multiplication
    Vector  operator* (double x) ;
    Vector  operator* (Matrix3x3 & m) ; 
    Matrix3x3 operator* (Vector & v) ;
    // Division
    Vector  operator/ (double x) {return ((*this)*(1/x));}
    Vector  operator% (Vector & v) ;
    Vector  operator/ (Vector & v) ;
    // Comparaison
    bool operator< (Vector & v) {if (dat[0]<v[0] && dat[1]<v[1] && dat[2]<v[2]) return true ; return false ;}
    bool operator> (Vector & v) {if (dat[0]>v[0] && dat[1]>v[1] && dat[2]>v[2]) return true ; return false ;}
    bool operator<= (Vector & v) {if (dat[0]<=v[0] && dat[1]<=v[1] && dat[2]<=v[2]) return true ; return false ;}
    bool operator>= (Vector & v) {if (dat[0]>=v[0] && dat[1]>=v[1] && dat[2]>=v[2]) return true ; return false ;}

  //Fonctions
  Vector  t (void) {Vector *res = new Vector ; (*res)=*this ; res->autochange() ; (*res).tmp=true ; return (*res) ; } // transpose
  void autochange (void) {iscolumn=(iscolumn==true?false:true);}
  bool iscol (void) { return iscolumn ; }
  double dot(Vector v) {return (v[0]*dat[0]+v[1]*dat[1]+v[2]*dat[2]) ;}
  Vector cross(Vector w) {Vector *res = new Vector ; (*res).dat[0]=dat[1]*w.dat[2]-dat[2]*w.dat[1] ;
  	  	  	  	  	  	  	  	  	  	  	  	  	  (*res).dat[1]=dat[2]*w.dat[0]-dat[0]*w.dat[2] ;
  	  	  	  	  	  	  	  	  	  	  	  	  	  (*res).dat[2]=dat[0]*w.dat[1]-dat[1]*w.dat[0] ; (*res).iscolumn=iscolumn ; return (*res) ; }
  void disp (void) ;   
  
  bool tmp ;
private : 
  double dat[3] ; 
  bool iscolumn ; 
};*/
class Vector {
public :
  // Constructeurs
  Vector() {dat[0]=dat[1]=dat[2]=0 ; iscolumn=true ; } ;
  Vector(double a)   {dat[0]=dat[1]=dat[2]=a ; iscolumn=true ; } ;
  Vector(const Vector & v)   {dat[0]=v.dat[0] ; dat[1]=v.dat[1] ; dat[2]=v.dat[2] ; iscolumn=v.iscolumn ; } ;
  Vector(double x, double y, double z) {dat[0]=x ; dat[1]=y ; dat[2]=z ; iscolumn=true ; } ;

  //Recherche
  double & operator() (int i) {return dat[i-1] ;}
  double & operator[] (int i) {return dat[i] ;}

  //affectations
  Vector & operator= (const Vector & m) {dat[0]=m.dat[0] ; dat[1]=m.dat[1] ; dat[2]=m.dat[2] ; iscolumn=m.iscolumn ; return *this ; };
  Vector & operator= (double x) {dat[0]=dat[1]=dat[2]=x ; iscolumn=true ; return *this ; };

  // Arithmétique + affectation (l'arithmétique de base est en dehors de la classe)
  // NB : la multiplication & la division sont par une constante
  // 	  Le modulo est remplacé par la multiplication terme à terme (.*)
  Vector & operator+= (const Vector & m) {dat[0]+=m.dat[0] ; dat[1]+=m.dat[1] ; dat[2]+=m.dat[2] ; return *this ; }
  Vector & operator-= (const Vector & m) {dat[0]-=m.dat[0] ; dat[1]-=m.dat[1] ; dat[2]-=m.dat[2] ; return *this ; }
  Vector & operator*= (const Vector & m) {dat[0]*=m.dat[0] ; dat[1]*=m.dat[1] ; dat[2]*=m.dat[2] ; return *this ; }
  Vector & operator/= (const Vector & m) {dat[0]/=m.dat[0] ; dat[1]/=m.dat[1] ; dat[2]/=m.dat[2] ; return *this ; }
  Vector & operator%= (const Vector & m) {dat[0]*=m.dat[0] ; dat[1]*=m.dat[1] ; dat[2]*=m.dat[2] ; return *this ; }
  // + Autres fonctions arithmétiques ...
  Vector div (void) { Vector c(*this) ; c.dat[0]=1/dat[0] ; c.dat[1]=1/dat[1] ; c.dat[2]=1/dat[2] ; return c ;} 			// Inverse
  Vector div (const Vector & m) {Vector c(*this) ; if (m.iscol()!=iscolumn && !m.isconst()) {printf("VECERR:WAYdiv") ;return 0 ;} ; c/=m ; return c ;}	// Division terme à terme ./

  // Comparaison & Test
  bool operator< (Vector const & v) {if (dat[0]<v.dat[0] && dat[1]<v.dat[1] && dat[2]<v.dat[2]) return true ; return false ;}
  bool operator> (Vector const & v) {if (dat[0]>v.dat[0] && dat[1]>v.dat[1] && dat[2]>v.dat[2]) return true ; return false ;}
  bool operator<= (Vector const & v) {if (dat[0]<=v.dat[0] && dat[1]<=v.dat[1] && dat[2]<=v.dat[2]) return true ; return false ;}
  bool operator>= (Vector const & v) {if (dat[0]>=v.dat[0] && dat[1]>=v.dat[1] && dat[2]>=v.dat[2]) return true ; return false ;}
  bool operator== (Vector const & v) {if (dat[0]==v.dat[0] && dat[1]==v.dat[1] && dat[2]==v.dat[2] && iscolumn==v.iscolumn) return true ; return false ;}
  bool operator!= (Vector const & v) {if (!(*this==v)) return true ; return false ;}
  bool isconst (void) const {if (dat[0]==dat[1] && dat[1]==dat[2]) return true ; return false ;}
  bool iscol (void) const { return iscolumn ; }


  // Orientation
  Vector  t (void) {Vector res(*this) ; res.autochange() ; return res ; } // transpose
  void autochange (void) {iscolumn=!iscolumn;}
  void set (double a, double b, double c) {dat[0]=a ; dat[1]=b ; dat[2]=c ;} ; 

  // Fonctions vectorielles
  double dot(Vector v) {return (v[0]*dat[0]+v[1]*dat[1]+v[2]*dat[2]) ;}
  Vector cross(Vector w) {Vector *res = new Vector ; (*res).dat[0]=dat[1]*w.dat[2]-dat[2]*w.dat[1] ;
						     (*res).dat[1]=dat[2]*w.dat[0]-dat[0]*w.dat[2] ;
  	  	  	  	  	  	     (*res).dat[2]=dat[0]*w.dat[1]-dat[1]*w.dat[0] ; 
						     (*res).iscolumn=iscolumn ; return (*res) ; }
  double norm () { return (sqrt(dat[0]*dat[0]+dat[1]*dat[1]+dat[2]*dat[2])) ; }
  void normalise () { double d=norm() ; dat[0]/=d ; dat[1]/=d ; dat[2]/=d ; }
  Matrix3x3 multiply (Vector & v) ;

  void disp (void) ;

private :
  double dat[3] ;
  bool iscolumn ;
};

inline Vector operator+ (Vector const& a, Vector const& b) {Vector c(a) ; if (a.iscol()!=b.iscol()) {printf("VECERR:WAY+") ;return 0 ;} c+=b ; return c ; }
inline Vector operator- (Vector const& a) {Vector c(a) ; c-=a ; c-=a ; return c ; }
inline Vector operator- (Vector const& a, Vector const& b) {Vector c(a) ; if (a.iscol()!=b.iscol()) {printf("VECERR:WAY-") ;return 0 ;} c-=b ; return c ; }
inline Vector operator* (Vector const& a, Vector const& b) {Vector c(a) ; if (!(a.isconst()||b.isconst())) {printf("VECERR:WAY*") ;return 0 ;} c*=b ; return c ; }
inline Vector operator* (Matrix3x3 & m, Vector & v) ;
inline Vector operator* (Vector & v, Matrix3x3 & m) ;
inline Vector operator/ (Vector const& a, Vector const& b) {Vector c(a) ; if (!(b.isconst())) {printf("VECERR:WAY/") ;return 0 ;} c/=b ; return c ; }
inline Vector operator% (Vector const& a, Vector const& b) {Vector c(a) ; if (a.iscol()!=b.iscol()) {printf("VECERR:WAY%%") ;return 0 ;} c%=b ; return c ; }


//Surcharge des operateurs sur réels
inline Matrix3x3  operator+ (double x, Matrix3x3 & m) {return (m+x) ; }
inline Matrix3x3  operator- (double x, Matrix3x3 & m) {return ((-m)+x) ; }
inline Matrix3x3  operator* (double x, Matrix3x3 & m) {return (m*x) ; }
//inline void operator/ (double x, Matrix3x3 m) {std::cerr << "MATRIXERR : double/matrix" ; }
/*inline Vector  operator+ (double x, Vector & m) {return (m+x) ; }
inline Vector  operator- (double x, Vector & m) {return ((-m)+x) ; }
inline Vector  operator* (double x, Vector & m) {return (m*x) ; }*/
//inline void operator/ (double x, Vector m) {cerr << "MATRIXERR : double/vector\n" ; }
//============================================================================

typedef struct {
  Vector axe ; 
  Vector centre ; 
  double D, L ; 
} Cylindre ; 

class Geometrie
{
public :
//static Matrix gravicentre (Matrix pt1, Matrix pt2, Matrix pt3) ;
static Vector gravicentre (Vector pt1, Vector pt2, Vector pt3) ;
// With newmat
//static Matrix rotation (Matrix vecteur, double angle, Matrix axe) ; 
//static Matrix rotation (Matrix vecteur, Matrix rot) ; 
//static Matrix rotation_axeZ (Matrix vecteur, double angle) ;
//static Matrix get_rot_matrix (double angle, Matrix axe) ; 
//static Matrix cart2sph (Matrix cart) ; 
static Vector cart2sph (Vector cart) ; 

// Without newmat
static Matrix3x3 rotation (Matrix3x3 mat, Matrix3x3 rotation) ;
static	  Vector rotation (Vector vec, Matrix3x3 rotation) ;
static Matrix3x3 rotation (Matrix3x3 mat, double angle, Vector axe) ;
static    Vector rotation (Vector vecteur, double angle, Vector axe) ;
static Matrix3x3 rotation_axeZ (Matrix3x3 vecteur, double angle) ; 
static    Vector rotation_axeZ (Vector vec, double angle) ;
static Matrix3x3 get_rot_matrix (double angle, Vector axe) ; 

static double distance_cylindre (Cylindre & C, Vector x) ; 
static Vector contact_cylindre (Cylindre & C, Vector x) ;
} ; 

/*class Convert
{
public :
static Matrix toVect (double a, double b, double c) {Matrix t(3,1) ; t<<a<<b<<c ; return t ; }
static Matrix toVect (double a, double b) {Matrix t(2,1) ; t<<a<<b ; return t ; }
} ;*/ 

class Calcul
{
public :
//static Matrix cross_product (Matrix a, Matrix b) ; 
static Vector cross_product (Vector a, Vector b) ; 
static double norm (Vector x) {return sqrt(x(1)*x(1)+x(2)*x(2)+x(3)*x(3));}
static double norm2D (Vector x) {return sqrt(x(1)*x(1)+x(2)*x(2));}
static double arctan (double x, double y) { return (x==0?(y>0?(M_PI/2):(-M_PI/2)):(x>0?atan(y/x):atan(y/x)+M_PI)) ; }
static double sgn (double x) { return x<0?-1:(x==0?0:1) ;}
static double angle_0_2pi (double angle) ;
};

class Fonction
{
public:
static void gaussienne1D (double & res,const double & x, const double & sigma) ;
static void creneau1D (double & res,const double & x, const double & sigma) ;

static void gaussienne3D (double & res,const double & x, const double & w, double radius) ; 
static void gaussienne3D_multivariee (double & res,  Vector & v, Vector & w, double radius) ; 
static void creneau3D (double & res,  Vector & x,  Vector & w, double radius) ; 
static void creneau3D_fin (double & res, Vector x, Vector w, double radius) ;
static void intersect_sphere (double & res, Vector &x, Vector &w, double radius) ;
static void intersect_cercle (double & res, Vector &x, Vector &w, double radius) ;
static void int_creneau3D (double & res,  Vector & xa,  Vector & xb,   Vector & w) ;
static void int_creneau2D (double & res, Vector &xa, Vector &xb, Vector &w) ;
static void int_gaussienne3D(double & res, Vector & xa,  Vector & xb,  Vector & w) ; 
static void int_intersect_sphere (double & res, Vector &xa, Vector &xb, Vector & w) ;
// Overload
static void gaussienne3D (double & res,  Vector & x,  Vector & w, double radius) ;

} ; 

#endif






