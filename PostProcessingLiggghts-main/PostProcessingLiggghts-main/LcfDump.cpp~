#include "Headers/LcfDump.h"

// =====================================================
// Fonctions de la sous classe LcfDump =================
//======================================================
int LcfDump::read (unsigned char read_type, int index)
{
// read_type==1 : sauver les données lues
 //* read_type==2 : ne lire qu'un dump
 //* read_type==4 : creer la strcuture step et incrémenter nb_step

  string ligne;
  Step null_step ;
  int i, j, type, stop=0, idx ;
  static bool first=true ; 
  
  if (read_type & 4) {nbsteps=0; printf("Lecture initiale du dump, peut prendre du temps ...\n") ; }
  if (read_type & 2) idx=index ;

  while (!dumpin.eof() && stop<2 )
  {
   getline(dumpin,ligne) ;
   type=isitem(ligne) ;
   switch (type)
   {
     case 1 : if (read_type & 4)
		{
		 nbsteps++ ; // Create new step and read 1 line to have timestep number.
		 steps.resize(nbsteps, null_step) ;
		 steps[nbsteps-1].nb_atomes=0 ; steps[nbsteps-1].Type=TCF ;
		 steps[nbsteps-1].posinfile=dumpin.tellg()-(streampos)1 -(streampos)ligne.length() ;
                 if (index==-1) idx=nbsteps-1 ;
                 actions.valeur=dumpin.tellg() ;
		}
	      if (read_type & 2) {stop++ ; if (stop>=2) break ; }
	      if (read_type & 1) {dumpin >> steps[idx].timestep ; }
	      break ;

     case 2 : if (read_type & 1) {dumpin >> steps[idx].nb_atomes ; }
     //printf("       [%d|%d]",idx, steps[idx].nb_atomes ) ; fflush(stdout) ;
	      break ;

     case 4 : if (read_type & 1)
	      {
               //cout << "o" ; fflush(stdout) ;
	       sparselabels(steps[idx], ligne) ; // Nouvelles données atomes. On continue la lecture de la ligne et on écrit la liste d'index
	      
	       // On alloue le tableau de données nécessaire
	       steps[idx].datas.resize(steps[idx].nb_idx, vector<double>(1,0)) ;
	       for (i=0 ; i<steps[idx].nb_idx; i++)
	       {steps[idx].datas[i].resize(steps[idx].nb_atomes, 0) ;}
	       // On lit l'ensemble des données que l'on range
	       for (i=0 ; i<steps[idx].nb_atomes ; i++)
	        {
		     for (j=0 ; j<steps[idx].nb_idx ; j++)
		       {
			int st=dumpin.rdstate() ;  
			dumpin >> steps[idx].datas[j][i];
			if (dumpin.fail())
			{
			 dumpin.clear() ; 
			 if (actions["nofileerror"].set && first)
			 { DISP_Warn("Une erreur de lecture est apparue. nofileerror étant activé, les erreurs suivantes seront silencieuses.\n") ; 
			   first=false ; }
			 else if (!actions["nofileerror"].set)
			 {
			  DISP_Warn("Une erreur de lecture est apparue à l'octet : ") ; 
			  printf("%d (error number %d, ts %d). ", (int)dumpin.tellg(), st, index) ;
			  DISP_Warn("Elle a été supprimée et la valeur est mise à 0.\n") ;
			  steps[idx].datas[j][i]=0 ; 
			 }
			}
		       }
		}
	       } break ;
   }   
  }
  
dumpin.clear() ;
return 0 ;
}
//-------------------------------------------------
int LcfDump::isitem (string ligne)
{
size_t position ;

position=ligne.find("ITEM: ") ;
if (position!=string::npos)
  {
  position=ligne.find("TIMESTEP") ;
  if (position!=string::npos)
    return 1 ;
  position=ligne.find("NUMBER OF ENTRIES") ;
  if (position!=string::npos)
    return 2 ;
  position=ligne.find("ENTRIES") ;
  if (position!=string::npos)
   return 4 ;

  cerr << "WARN1 : item inconnu " << ligne << ".\n" ;
  return -1 ;
  }
else
   return 0 ;
}
//-------------------------------------------------------------
int LcfDump::sparselabels(Step &step , string ligne)
{
  int compteur=0 ;
  size_t espace ;
  string ligne2, item ;

  ligne2=ligne.substr(14) ;
  while (1)
  {
    espace=ligne2.find_first_of(' ') ;
    if (espace==ligne2.npos) break ;
    item=ligne2.substr(0, espace) ;
    ligne2=ligne2.substr(espace+1) ;

    step.idx_col.resize(compteur+1) ;
    if (actions["noperiodicity"].set)
     {
     if (item=="c_cout[1]")            step.idx_col[compteur]=CFID1 ;
     else if (item == "c_cout[2]")      step.idx_col[compteur]=CFID2 ;
     else if (item == "c_cout[3]")      step.idx_col[compteur]=CFFORCEX ;
     else if (item == "c_cout[4]")      step.idx_col[compteur]=CFFORCEY ;
     else if (item == "c_cout[5]")     step.idx_col[compteur]=CFFORCEZ ;
     else {cerr << "WARN2cf : le type de données" << item <<"est inconnu\n" ; step.idx_col[compteur]=UNKNOWN ; }
     }
    else
     {
     if (item=="c_cout[1]")            step.idx_col[compteur]=CFID1 ;
     else if (item == "c_cout[2]")      step.idx_col[compteur]=CFID2 ;
     else if (item == "c_cout[3]")      step.idx_col[compteur]=CFPERIOD ;
     else if (item == "c_cout[4]")      step.idx_col[compteur]=CFFORCEX ;
     else if (item == "c_cout[5]")      step.idx_col[compteur]=CFFORCEY ;
     else if (item == "c_cout[6]")     step.idx_col[compteur]=CFFORCEZ ;
     else if (item == "c_contacts[7]")  step.idx_col[compteur]=CFID1 ;
     else if (item == "c_contacts[8]")      step.idx_col[compteur]=CFID2 ;
     else if (item == "c_contacts[9]")      step.idx_col[compteur]=CFPERIOD ;
     else if (item == "c_contacts[1]")      step.idx_col[compteur]=CFID1X ;
     else if (item == "c_contacts[2]")      step.idx_col[compteur]=CFID1Y ;
     else if (item == "c_contacts[3]")      step.idx_col[compteur]=CFID1Z ;
     else if (item == "c_contacts[4]")      step.idx_col[compteur]=CFID2X ;
     else if (item == "c_contacts[5]")      step.idx_col[compteur]=CFID2Y ;
     else if (item == "c_contacts[6]")      step.idx_col[compteur]=CFID2Z ;
     else if (item == "c_contacts[10]")      step.idx_col[compteur]=CFFORCEX ;
     else if (item == "c_contacts[11]")      step.idx_col[compteur]=CFFORCEY ;
     else if (item == "c_contacts[12]")     step.idx_col[compteur]=CFFORCEZ ;
     else {cerr << "WARN2cf : le type de données" << item <<"est inconnu\n" ; step.idx_col[compteur]=UNKNOWN ; }
     }
    compteur++ ;
  }
  step.nb_idx=compteur ;
return 1 ;   
}

//------------------------------------------------------
int LcfDump::write_asVTK (string chemin, LucDump &dump)
{
long int loop[3] ;
int idx[3], res, res2, i, j, k, v, ts; 
string chemin2 ; char strnum[20] ; 
double ** datas ; 
map<string,int>::iterator it ; 
Writing * W ;
ofstream out ; 

W=&(actions.ecrire) ; 
if (W->get_typeset("cfdump:vtk")) // have to write all vtk
{ 
 cout << "LcfDump::write_asVTK         " ;
 loopdat(loop) ; 
 actions.total=loop[2]-loop[0] ; actions.disp_progress() ;
 datas=(double **) malloc(sizeof(double *)*9) ; 

 for (i=loop[0] ; i<loop[2] ; i+=loop[1])
 {
  actions.valeur=i-loop[0] ;
  sprintf(strnum, "%ld", i-loop[0]) ; chemin2=chemin+"-"+strnum+".vtk" ; 
  out.open(chemin2.c_str(), ios::out) ;
  check_timestep(i) ;
  
  idx[0]=dump.steps[i].find_idx(POSX) ; idx[1]=dump.steps[i].find_idx(POSY) ; idx[2]=dump.steps[i].find_idx(POSZ) ; 
  if (idx[0]==-1 || idx[1]==-1 || idx[2]==-1 ) DISP_Err("Err: les positions des atomes sont indispensables pour écrire le vtk") ; 
  datas[0]=&(dump.steps[i].datas[idx[0]][0]) ; datas[1]=&(dump.steps[i].datas[idx[1]][0]) ; datas[2]=&(dump.steps[i].datas[idx[2]][0]) ;
  W->VTKUnstructuredGrid(out, datas, dump.steps[i].nb_atomes) ;
  
  idx[0]=steps[i].find_idx(CFID1) ; idx[1]=steps[i].find_idx(CFID2) ;  
  if (idx[0]==-1 || idx[1]==-1 ) DISP_Err("Err: les CFID des atomes sont indispensables pour écrire le vtk") ; 
  datas[0]=&(steps[i].datas[idx[0]][0]) ; datas[1]=&(steps[i].datas[idx[1]][0]) ; 
  W->VTKCellLines(out, datas, steps[i].nb_atomes) ; 
  
  bool first=true ; 
  while ( (res=W->get_nextfield("cfdump:vtk", "atm"))  != -1)
  {
    // Construction des données 
    if (first) {W->VTKStartPointData(out, dump.steps[i].nb_atomes) ; first=false ; }
    it=W->dim.begin() ; std::advance(it,res);
    for (j=0 ; (res2=W->get_nextvardef(it->first)) != -1 ; j++  )
      datas[j]=&(dump.steps[i].datas[dump.steps[i].find_idx(res2)][0]) ;

    W->VTKField(out, it->first, datas,it->second,steps[i].nb_atomes) ; 
  }
  
  W->VTKStartCellData(out, steps[i].nb_atomes) ; 
    
  while ( (res=W->get_nextfield("cfdump:vtk"))  != -1)
  {
    // Construction des données 
    it=W->dim.begin() ; std::advance(it,res);
    for (j=0 ; (res2=W->get_nextvardef(it->first, "cf")) != -1 ; j++  )
    {datas[j]=&(steps[i].datas[steps[i].find_idx(res2)][0]) ;}
    W->VTKField(out, it->first, datas, it->second, steps[i].nb_atomes) ;  
  }
  
  out.close() ; 
 }
}
    
if (W->get_typeset("ldump:mat")) // have to write a matlab 
{
#ifdef MATLAB  
 MATFile * mout ; 
 DISP_Info("Attention : pour l'écrire matlab de LDump, les données sont d'abord chargées en mémoire, ce qui peut prendre beaucoup de temps et risque de dépasser la capacité mémoire.\n") ; 
 cout << "Dump::write_asVTKBase          " ;
 loopdat(loop) ;
 actions.total=loop[2]-loop[0] ; actions.disp_progress() ;
 
 // Allocation mémoire
 i=0 ; check_timestep(loop[0]) ;
 while ( (res=W->get_nextfield("ldump:mat")) != -1)
  {
    it=W->dim.begin() ; std::advance(it,res);
    //printf("Allocation de %ld double\n", steps[loop[0]].nb_atomes*W->get_numelem(it->first)*((loop[2]-loop[0])/loop[1])) ;
    if (i==0) datas=(double **) malloc ((i+1)*sizeof(double *)) ; 
    else datas=(double **) realloc(datas, (i+1)*sizeof(double *)) ; 
    datas[i] = (double *) mxCalloc(steps[loop[0]].nb_atomes*W->get_numelem(it->first)*((loop[2]-loop[0])/loop[1]), sizeof(double));
    i++ ; 
  }
 
 for (i=loop[0] ; i<loop[2] ; i+=loop[1])
 {
  actions.valeur=i-loop[0] ;
  check_timestep(i) ;
  ts=(i-loop[0])/loop[1] ; // dat[var][atm,dim,ts]
  for (v=0 ; (res=W->get_nextfield("ldump:mat")) != -1 ; v++)
  {
    it=W->dim.begin() ; std::advance(it,res);
    for (j=0 ; (res2=W->get_nextvardef(it->first)) != -1 ; j++)
    {
     idx[0]=steps[i].find_idx(res2) ;
     for (k=0 ; k<steps[i].nb_atomes ; k++)
      datas[v][ts*W->get_numelem(it->first)*steps[i].nb_atomes + j*steps[i].nb_atomes + k] = steps[i].datas[idx[0]][k] ; 
    }
  }
 }
 
 chemin2=chemin+".mat" ; 
 mout=matOpen(chemin2.c_str(), "w");
 j=0 ;
 while ( (res=W->get_nextfield("ldump:mat")) != -1)
 {
  it=W->dim.begin() ; std::advance(it,res);
  W->MATMatrix (mout, it->first, datas[j], 3, steps[i-loop[1]].nb_atomes, W->get_numelem(it->first), (loop[2]-loop[0])/loop[1]) ; 
  j++ ; 
 }
 matClose(mout) ; 
#else
 DISP_Warn ("Le programme n'a pas été compilé avec le support matlab. Pas de fichier mat écrit.\n") ; 
#endif   
}
return 1 ;   



/*
if (actions["extract"].set)
   {debut=(int)actions["extract"]["extract_deb"] ; fin=(int)actions["extract"]["extract_fin"] ;
     if (debut<0) {debut=0 ; cout << "WARNING : le debut de l'extraction est <0. RAZ.\n" ; }
     if (fin>nbsteps) {fin=nbsteps ; cout << "WARNING : la fin de l'extraction est >nbsteps. Remise à nbsteps.\n" ; }
  }
else
   {debut=0 ; fin=nbsteps;}

if (actions["downsampling"].set)
   { step=(int)actions["downsampling"]["downsampling"] ;
   if (step<=0 || step>nbsteps) { step=1 ; cout << "WARNING : downsampling incorrect. Remis à 1.\n" ;}
   }
else
   step=1 ;

actions.total=(fin-debut) ;
actions.valeur=0 ;
cout << "\nLcfDump::write_asVTK          " ;
actions.disp_progress() ;

j=0 ; dump.check_timestep(j) ;
for (i=debut ; i<fin ; i+=step)
   {actions.valeur=(i-debut) ;
   chemin2.str("") ;
   chemin2 << chemin << "-" << (i-debut)/step << ".vtk" ; 
   out.open(chemin2.str().c_str(), ios::out) ;

   check_timestep(i) ;  

   while (dump.steps[j].timestep != steps[i].timestep)
     {
     if (dump.steps[j].timestep > steps[i].timestep)
        {cout << "ERR : impossible de trouver des timestep correspondant entre le LucDump et le LcfDump" ; return -1 ; }
     else
        {j++ ; }
     }

   steps[i].write_asVTK(out, dump.steps[dump.inscrit]) ;
   out.close() ;
   }*/
return 1;    
}
//------------------------------------------------------
int LcfDump::write_grainforce (string chemin)
{
string chem ;
char infos[500] ;
long int i, loop[3];
double ** meanforces ; int *meangrains ; int denom=0 ;
ofstream out ;
//double forces[3] ;

//chem=chemin ; chem.append("-ForceByAngle.txt") ;
//out.open(chem.c_str(), ios::out) ;

loopdat(loop) ;

cout << "\nLcfDump::write_grainforce          " ;
actions.total=loop[2] ; actions.disp_progress() ;
DISP_Info("On travail sur du 2D en xy\n") ;
// Création des tableaux de données moyennes si nécessaires
// TODO
if (actions["mean"].set)
	  {
	  meanforces=(double **)malloc((int)(actions["grainforce-by-angle"]["nbbox_theta"])*sizeof(double *)) ;
	  meangrains=(int *)malloc((int)(actions["grainforce-by-angle"]["nbbox_theta"])*sizeof(int)) ;
	  for (i=0 ; i<actions["grainforce-by-angle"]["nbbox_theta"] ; i++)
	     {meanforces[i]=(double *)malloc(7*sizeof(double)) ; meanforces[i][0]=meanforces[i][1]=meanforces[i][2]=0 ; meangrains[i]=0 ;}
	  }

// Boucle sur les ts
for (i=loop[0] ; i<loop[2] ; i+=loop[1])
	{
	actions.valeur=i ;
	check_timestep(i) ;
	denom=denom+steps[i].grain_force(meanforces, meangrains) ;
	}
//out.close() ;

DISP_Info("Nombre de timestep otés en raison de traversée de pbc : ") ;
printf("%d %d\n", (int) ((loop[2]-loop[0])/(double)loop[1] - denom), denom) ;
sprintf(infos, "La largeur en angle des boites est de %f degrés (%f radians).\n", 360.0/actions["grainforce-by-angle"]["nbbox_theta"], 2*M_PI/actions["grainforce-by-angle"]["nbbox_theta"]) ;    ;
DISP_Info(infos) ;
//sprintf(infos, "La commande matlab à utiliser est reshape(X, %d, %d, %d).\n", 9, (int)actions["grainforce-by-angle"]["nbbox_theta"], (int)denom) ;
//DISP_Info(infos) ;

// Création du fichier avec moyennage si besoin
if (actions["mean"].set)
 {
 chem=chemin ; chem.append("-GrainForceByAngle-mean.txt") ;
 out.open(chem.c_str(), ios::out) ;
 for (i=0; i<actions["grainforce-by-angle"]["nbbox_theta"] ; i++ )
    {
	out << (2*i*M_PI)/actions["grainforce-by-angle"]["nbbox_theta"]+M_PI/actions["grainforce-by-angle"]["nbbox_theta"] << " "  << meangrains[i]/denom << " " ;
	out << meanforces[i][0]/denom << " " << meanforces[i][1]/denom << " " << meanforces[i][2]/denom << "\n" ;
    }
 out.close() ;
 }

return 0 ;
}
//------------------------------------------------------
int LcfDump::write_grainforcetot (string chemin)
{
string chem ;
char infos[500] ;
long int i, j, loop[3], idx[6], sgn;
double forces[3] ;

ofstream out ;
//double forces[3] ;

//chem=chemin ; chem.append("-ForceByAngle.txt") ;
//out.open(chem.c_str(), ios::out) ;

loopdat(loop) ;

cout << "\nLcfDump::write_grainforcetot          " ;
actions.total=loop[2] ; actions.disp_progress() ;
DISP_Info("On travail sur du 2D en xy\n") ;
// Création des tableaux de données moyennes si nécessaires
// TODO
/*if (actions["mean"].set)
	  {
	  meanforces=(double **)malloc((int)(actions["grainforce-by-angle"]["nbbox_theta"])*sizeof(double *)) ;
	  meangrains=(int *)malloc((int)(actions["grainforce-by-angle"]["nbbox_theta"])*sizeof(int)) ;
	  for (i=0 ; i<actions["grainforce-by-angle"]["nbbox_theta"] ; i++)
	     {meanforces[i]=(double *)malloc(7*sizeof(double)) ; meanforces[i][0]=meanforces[i][1]=meanforces[i][2]=0 ; meangrains[i]=0 ;}
	  }
*/
// Boucle sur les ts
chem=chemin ; chem.append("-GrainForce.txt") ;
out.open(chem.c_str(), ios::out) ;
int nbstepok=0 ;
for (i=loop[0] ; i<loop[2] ; i+=loop[1])
	{
	actions.valeur=i ;
	forces[0]=forces[1]=forces[2]=0 ;
	check_timestep(i) ;

	if (steps[i].has_periodic_chains==true) continue ;

	idx[0]=steps[i].find_idx(CFFORCEX) ; idx[1]=steps[i].find_idx(CFFORCEY) ; idx[2]=steps[i].find_idx(CFFORCEZ) ;
	idx[3]=steps[i].find_idx(CFID1) ; idx[4]=steps[i].find_idx(CFID2) ; //idx[5]=find_idx(CFPERIOD) ;
	for (j=0 ; j<steps[i].nb_atomes ; j++)
	 {
		//if (datas[idx[5]][i]==1) return 0 ;
	    if (steps[i].datas[idx[4]][j]==actions["grainforce"]["id"]) sgn=-1;
		else if (steps[i].datas[idx[3]][j]==actions["grainforce"]["id"]) sgn=1 ;  //Tout va bien
		else {DISP_Warn("Il n'y a pas le bon ID dans la chaines !") ; continue ; }

		forces[0]+=(steps[i].datas[idx[0]][j]*sgn) ;
		forces[1]+=(steps[i].datas[idx[1]][j]*sgn) ;
		forces[2]+=(steps[i].datas[idx[2]][j]*sgn) ;
	 }

	nbstepok++ ;
	out << forces[0] <<" " << forces[1] << " " << forces[2] ;
	out << "\n" ;
	}
out.close() ;

char chaine[500] ;
sprintf(chaine, "Nombre de ts utilises : %d sur %ld.", nbstepok, (loop[2]-loop[0])/loop[1]) ;
DISP_Info(chaine) ;

return 0 ;
}
//==============================================
int LcfDump::write_radiuscontact (void)
{

char infos[500] ;
long int i, j, loop[3], idx[2], idxOK, sgn;
double radius=0, *rayons; int *ids ;
FILE *in ;

//double forces[3] ;

//chem=chemin ; chem.append("-ForceByAngle.txt") ;
//out.open(chem.c_str(), ios::out) ;

loopdat(loop) ;

cout << "\nLcfDump::write_radiuscontact          " ;
actions.total=loop[2] ; actions.disp_progress() ;
DISP_Info("On travail sur du 2D en xy\n") ;

// Chargement du tableau des rayons (compliqué sinon...)
DISP_Warn("On utilise un fichier externe de rayons Radius.txt. Ce n'est certes pas joli, mais beaucoup plus simple !!\n") ;
in=fopen("Radius.txt", "r") ;
double tmpray ; int id, nbids=0, tmpid, idold=-1 ;
ids=(int *)malloc(sizeof(int)) ; rayons=(double *)malloc(sizeof(double)) ;
while (!feof(in))
 {
 fscanf(in, "%d %lf\n", &id, &tmpray) ;
 nbids++;
 ids=(int *)realloc(ids, nbids*sizeof(int)) ;
 rayons=(double *)realloc(rayons, nbids*sizeof(double)) ;
 ids[nbids-1]=id ;
 rayons[nbids-1]=tmpray ;
 }

for(i=0 ; i<nbids ; i++)
 {
 for (j=0 ; j<nbids ; j++)
	if (ids[j]==i) break ;
 if (j==nbids)
    {nbids++ ;
    ids	  = (int *)realloc(ids, nbids*sizeof(int)) ;
    rayons= (double *)realloc(rayons, nbids*sizeof(double)) ;
    ids[nbids-1]=ids[i] ; ids[i]=i ;
    rayons[nbids-1]=rayons[i] ; rayons[i]=0 ;
    }
 else
 	{
	tmpray=rayons[j] ; rayons[j]=rayons[i] ; rayons[i]=tmpray ;
 	tmpid = ids[j] ;   ids[j]   = ids[i]   ; ids[i]   = tmpid ;
 	}
 }
fclose(in) ;


// Boucle sur les ts

int nbstepok=0 ; int nbgrains=0 ;
for (i=loop[0] ; i<loop[2] ; i+=loop[1])
	{
	actions.valeur=i ;
	check_timestep(i) ;

	if (steps[i].has_periodic_chains==true) continue ;

	idx[0]=steps[i].find_idx(CFID1) ; idx[1]=steps[i].find_idx(CFID2) ; //idx[5]=find_idx(CFPERIOD) ;
	for (j=0 ; j<steps[i].nb_atomes ; j++)
	 {
		//if (datas[idx[5]][i]==1) return 0 ;
	    if      (steps[i].datas[idx[0]][j]==actions["grain-rayon-around"]["id"]) idxOK=steps[i].datas[idx[1]][j];
		else if (steps[i].datas[idx[1]][j]==actions["grain-rayon-around"]["id"]) idxOK=steps[i].datas[idx[0]][j];  //Tout va bien
		else {DISP_Warn("Il n'y a pas le bon ID dans la chaines !") ; continue ; }

	    radius+=rayons[idxOK] ; nbgrains++ ;
	 }

	nbstepok++ ;
	}

char chaine[500] ;
sprintf(chaine, "Nombre de ts utilises : %d sur %ld. Rayon : %.15lf.\n", nbstepok, (loop[2]-loop[0])/loop[1], radius/(double)nbgrains) ;
DISP_Info(chaine) ;

return 0 ;

}

//===========================================
int LcfDump::coupletot (string chemin, LucDump & ldump)
{
  int i ; 
  long int loop[3] ; 
  double omega, **result ; 
  Vector c, caxe, axis, couple ;
  Matrix3x3 Rot ; 
  Cylindre C ; 
  
  loopdat(loop) ;
  result=(double**)malloc(3*sizeof(double*)) ; 
  result[0]=(double*)malloc(sizeof(double)*(loop[2]-loop[0])/loop[1]) ; 
  result[1]=(double*)malloc(sizeof(double)*(loop[2]-loop[0])/loop[1]) ; 
  result[2]=(double*)malloc(sizeof(double)*(loop[2]-loop[0])/loop[1]) ; 
  
  cout << "\nLcfDump::coupletot          " ;
  actions.total=loop[2] ; actions.disp_progress() ;
  
  cout << " Entrer la position du centre du cylindre (x y z) (constante) : \n" ;
  cin >> C.centre(1) >> C.centre(2) >> C.centre(3) ;
  cout << "Coordonnées entrées : " << C.centre(1) << " " << C.centre(2) << " " << C.centre(3) << "\n";
  
  cout << " Entrer l'axe initial du cylindre (x y z) (premier tsdump) : \n" ;
  cin >> caxe(1) >> caxe(2) >> caxe(3) ;
  caxe.normalise() ; 
  cout << "Coordonnées entrées : " << caxe(1) << " " << caxe(2) << " " << caxe(3) << "\n";
  
  cout << " Entrer la vitesse de rotation (en degré par tsdump) : \n" ;
  cin >> omega ; omega=omega/180*M_PI ;
  cout << "Vitesse entrée : " << omega << "\n";
  
  cout << " Entrer l'axe de rotation du cylindre (x, y, z) : \n" ;
  cin >> axis(1) >> axis(2) >> axis(3) ;
  axis.normalise() ; 
  cout << "Coordonnées entrées : " << axis(1) << " " << axis(2) << " " << axis(3) << "\n";
  
  DISP_Info("Les tailles suivantes sont utilisées pour le cylindre et les grains : ") ;
  C.L=actions.L ; C.D=actions.D ; 
  printf("L= %f, D= %f, d=%f.\n",actions.L, actions.D, actions.Radius*2) ; 
  
  for (i=loop[0] ; i<loop[2] ; i+=loop[1])
	{
	actions.valeur=i ;
	check_timestep(i) ;
	C.axe=Geometrie::rotation(caxe, i*omega, axis) ; 
	couple=0 ; 
	steps[i].LCFcouple (ldump.steps[i], couple, C) ;
	result[0][i]=couple(1) ; 
	result[1][i]=couple(2) ; 
	result[2][i]=couple(3) ; 
	}

ofstream out ;
string chemin2 ; 
chemin2=chemin+"-forcecyl.txt" ; 
out.open(chemin2.c_str(), ios::out) ; 
actions.ecrire.ASCIIwrite (out, result, 3, (loop[2]-loop[0])/loop[1]) ; 
return 1; 
}






