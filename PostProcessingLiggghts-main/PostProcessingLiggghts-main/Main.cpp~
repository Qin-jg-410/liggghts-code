#include "Headers/Main.h"


Actions actions ;

int main (int argc, char *argv[])
{
int i, res ;

// Création des arguments possibles
actions.initialize() ; 

// lecture des arguments de ligne de commande
actions.parse_args(argc, argv) ; 
actions.parse_args_fromfile() ; 
actions.write_history(0, argc, argv) ;

// Traitement des arguments requierant une action immédiate particulière
if (actions["v1"].set) actions["noperiodicity"].set=true ;
if (actions["clean"].set) {actions.clean(argv[argc-1]) ; }
if (actions["help"].set) {actions.aide() ; std::exit(EXIT_SUCCESS) ; }
if (actions["version"].set) {cout << "Date de compilation : " << __DATE__ << "\n" ; std::exit(EXIT_SUCCESS) ; }
if (actions["setrayon"].set) {actions.Radius=actions["setrayon"]["valeur"] ; }
if (actions["setdensite"].set) {actions.Rhograin=actions["setdensite"]["valeur"] ; }

if (actions["vtk"].set)
     {
     FDump fdump ; 
     fdump.open(actions.dumpnames[0]) ;

     fdump.disp() ;

     if (actions["separe"].set)
        fdump.write_asVTK(actions.dumpnames[0]) ;
     if (actions["recode"].set)
        fdump.write_asOneVTK(actions.dumpnames[0]) ;
     if (actions["w/forcetot"].set)
        fdump.write_forcestot(actions.dumpnames[0]) ;
     if (actions["w/coupletot"].set)
        fdump.write_coupletot(actions.dumpnames[0]) ;
     if (actions["mean"].set)
        fdump.mean_stress(actions.dumpnames[0]) ; 
     if (actions["compress"].set)
        {
	FILE * out ; 
        string temp ; 
        temp=actions.dumpnames[0]+".cp" ; 
        out=fopen(temp.c_str(), "wb") ; 
        Compresser tmp ; 
        tmp.compress (fdump, actions.dumpnames[0], out) ;
        fclose(out) ; 
        }
     }

else if (actions["chainforce"].set)
     {
     LcfDump cfdump ; 
     LucDump dump, walldump ;
     Filter filtre_tmp ; 

     char filterdo[50] ;

     if (!actions["compress"].set) 
        {
     	// Création du filtre pour le Ldump de positions atomiques : rangement des atomes par id
     	if (actions["iscylperiodic"].set) sprintf(filterdo, "id::sort::null;null::quartx+y+::null") ;
     	else sprintf(filterdo, "id::sort::null") ;
     	dump.prefiltre=filtre_tmp.parse_arg(filterdo) ;

     	// Création des filtres pour le CFdump : pas de chaines à travers les pbc, filtre de création des CFR CFMAG etc.
     	if (!actions["noperiodicity"].set) sprintf(filterdo, "null::.nopbc.::null;null::.cfpp.::null") ;
     	else sprintf(filterdo, "null::.cfpp.::null") ;
     	cfdump.prefiltre=filtre_tmp.parse_arg(filterdo) ;

     	// Création des filtres pour le WallDump (qui est un Ldump en fait ...) : on enlève les interactions nulles juste, l'ajout aux CFDump se fera dans le filtre .cfpp.
     	// Non en fait on va pas se faire chier, on fera le test des forces non nulles dans le filtre .cfpp.

     	// Création du lien avec les autres dump dans le CFdump, et ajout d'un postfiltre si nécessaire
     	cfdump.prefiltre[0].alter_dump=&(dump) ; cfdump.prefiltre[1].alter_dump=&(dump) ;
     	cfdump.prefiltre[0].wall_dump=&(walldump) ; cfdump.prefiltre[1].wall_dump=&(walldump) ;
     	if (actions["iscylperiodic"].set)
           { sprintf(filterdo, "null::quartx+y+::null;null::.cpplink.::null") ;
    	cfdump.postfiltre=filtre_tmp.parse_arg(filterdo) ; }

     	// Ouverture réelle des dumps annexes
     	dump.open(actions.dumpnames[1]) ;
     	if (actions["wallchainforce"].set)
	   walldump.open(actions.dumpnames[2]) ;
        }

     cfdump.open(actions.dumpnames[0]) ; 
     //dump.disp () ; 
     //cfdump.disp() ; 

     if (actions["coarse-graining"].set)
        {
        CoarseDump dcor ; 
        if (dump.nbsteps != cfdump.nbsteps)
           {printf("%d %d", dump.nbsteps,cfdump.nbsteps) ; 
	     cout << "ATTENTION : dump atomique et de chainforce doivent être au même échantillonnage (ne semble pas le cas pour l'instant ...) (effectuer d'abord un /PostProcessing --reechantillonner --downsampling xx --extract xx yy dump.atm/ si besoin)\n" ; return 0 ; }

        cfdump.check_timestep(0) ;

        for (i=0 ; i<dump.nbsteps ; i++)
          {
          dump.steps[i].Type=TL ; if (actions["wallchainforce"].set) {walldump.steps[i].Type=TL ;}
          cfdump.steps[i].box[0][0]=dump.steps[0].box[0][0] ; cfdump.steps[i].box[0][1]=dump.steps[0].box[0][1] ; cfdump.steps[i].box[1][0]=dump.steps[0].box[1][0] ;
          cfdump.steps[i].box[1][1]=dump.steps[0].box[1][1] ; cfdump.steps[i].box[2][0]=dump.steps[0].box[2][0] ; cfdump.steps[i].box[2][1]=dump.steps[0].box[2][1] ;
          }
        //dcor.do_coarse(dump) ;
        if (actions["noatmcoarse"].set) {LucDump nulldump ; dcor.do_coarse(cfdump, nulldump, 0) ;}
        else dcor.do_coarse(cfdump, dump, 2) ;
        //dcor.write(chemin);
        dcor.write_asMatlabSpatioTemp (actions.dumpnames[0]) ;
	
        if (actions["mean"].set)
          {
          Coarse dcormean ;
          dcormean=dcor.mean() ;
          ofstream out ; stringstream chemin2 ; chemin2.str("") ; 
          chemin2 << actions.dumpnames[0] << "-coarsemean.vtk" ;  
          out.open(chemin2.str().c_str(), ios::out) ;
          dcormean.write_asVTK(out) ;
          out.close() ;
          chemin2.str("") ; chemin2 << actions.dumpnames[0] << "-coarsemean-sigma.txt" ;
          out.open(chemin2.str().c_str(), ios::out) ;
          dcormean.write_asMatlabTCF2D(out);
          }
        else
          {
          dcor.write(actions.dumpnames[0]) ;
          }
        }
     else if (actions["grainforce-by-angle"].set)
    	cfdump.write_grainforce(actions.dumpnames[0]) ;
     else if (actions["grainforce"].set)
    	cfdump.write_grainforcetot(actions.dumpnames[0]) ;
     else if (actions["grain-rayon-around"].set)
    	cfdump.write_radiuscontact() ;
     else if (actions["w/coupletot"].set)
	cfdump.coupletot(actions.dumpnames[0], dump) ; 
     else if (actions["compress"].set)
     	 {
    	 FILE * out ;
    	 string temp ;
    	 temp=actions.dumpnames[0]+".cp" ;
    	 out=fopen(temp.c_str(), "wb") ;
    	 Compresser tmp ;
    	 tmp.compress (cfdump, actions.dumpnames[0], out) ;
     	 }
     else
        cfdump.write_asVTK (actions.dumpnames[0], dump);
     }

else
     {
     /*if (actions & COMPARE)
        {
        comparer (argv[argc-2], argv[argc-1]) ; exit(0) ; 
        }*/

     if (actions["cp"].set)   // C'est un dump compressé
       {
       LcpDump dump ;
       // if (filtre_tmp.lst_op.size()>0) {dump.filtre=filtre_tmp.lst_op ; } 
       dump.dumpinc=fopen(actions.dumpnames[0].c_str(), "rb") ;
       res=dump.open(actions.dumpnames[0]) ;
       dump.disp() ; 
       if (actions["uncompress"].set)
        {
        dump.uncompress() ; 
        std::exit(EXIT_SUCCESS) ; 
	    }
       if (actions["dump2vtk"].set)
        { dump.write_asVTK(actions.dumpnames[0]) ; }
       if (actions["coarse-graining"].set)
        {
	CoarseDump dcor ; LcfDump nulldump ; 
        dcor.do_coarse(dump, nulldump, 1) ; 
       // dcor.write(chemin) ; 
        if (actions["mean"].set)
           {
           Coarse dcormean ;
           dcormean=dcor.mean() ;
           ofstream out ; stringstream chemin2 ; chemin2.str("") ; 
           chemin2 << actions.dumpnames[0] << "-coarsemean.vtk" ;  
           out.open(chemin2.str().c_str(), ios::out) ;
           dcormean.write_asVTK(out) ;  
           }
         //dcor.write_asMatlab(chemin) ;
         } 
       if (actions["surface"].set)
        {
        Surface surf ; 
        surf.detect_surface (dump) ; 
        surf.write_asmatlab (actions.dumpnames[0])  ; 
        }
       }

     else			// C'est un dump décompressé
       {
       LucDump dump ;
       
       // if (filtre_tmp.lst_op.size()>0) {dump.filtre=filtre_tmp.lst_op ; }

       res=dump.open(actions.dumpnames[0]) ;
       if (res==-1) {std::exit(EXIT_FAILURE) ; }
       //dump.disp();

       //Stats stat ; stat.compute_step(dump, dump.nbsteps-10) ; stat.disp() ;  

       if (actions["dstminmax"].set) 
       	   {
    	   Stats stat ;
    	   stat.minmaxdst(dump, (int) actions["dstminmax"]["timestep"]) ;
       	   }
       if (actions["compress"].set)
        {
    	FILE * out ;
        string temp ; 
        temp=actions.dumpnames[0]+".cp" ; 
        out=fopen(temp.c_str(), "wb") ; 
        Compresser tmp ; 
        tmp.compress (dump, actions.dumpnames[0], out) ;
        }
       if (actions["dump2vtk"].set)
        {dump.write_asVTK(actions.dumpnames[0]) ; }
       if (actions["dump2restart"].set)
	    {dump.write_asRESTART(actions.dumpnames[0]) ; }
       if (actions["coarse-graining"].set)
        {
	LcfDump nulldump ; 
	CoarseDump dcor ;
        dcor.do_coarse(nulldump, dump, 1) ; 
        dcor.write(actions.dumpnames[0]) ; 
        if (actions["mean"].set)
          {
          Coarse dcormean ;
          dcormean=dcor.mean() ;
          ofstream out, out2 ; stringstream chemin2 ; chemin2.str("") ;
          chemin2 << actions.dumpnames[0] << "-coarsemean.vtk" ;  
          out.open(chemin2.str().c_str(), ios::out) ;
          dcormean.write_asVTK(out) ;  
          out.close() ;
          chemin2.str("") ; chemin2 << actions.dumpnames[0] << "-coarsemean-vx.txt" ;
          out.open(chemin2.str().c_str(), ios::out) ;
          chemin2.str("") ; chemin2 << actions.dumpnames[0] << "-coarsemean-phi.txt" ;
          out2.open(chemin2.str().c_str(), ios::out) ;
          dcormean.write_asMatlab(out, out2);
          out.close() ;
          }
         //dcor.write_asMatlab(chemin) ; 
        }
       if (actions["coarse-graining-basic"].set)
        {
	CoarseDump dcor ;
        dcor.do_coarse_basic(dump, actions.dumpnames[0]) ;
        }
       if (actions["surface"].set || actions["surfaces"].set)
        {
        Surface surf ;
        if (actions["surfaces"].set) {actions.copyarg("surfaces", "surface") ; }
        surf.detect_surface (dump) ; 
        surf.write_asmatlab (actions.dumpnames[0])  ; 
        if (actions["surfaces"].set) surf.write_asmatlab_bottom(actions.dumpnames[0]) ;
        }
       if (actions["surface2D"].set)
               {
               Surface surf ;
               surf.detect_surface2D (dump) ;
               surf.write_asmatlab2D (actions.dumpnames[0])  ;
               }
       if (actions["downsampling"].set)
         dump.write_asDUMP(actions.dumpnames[0]) ;
       if (actions["w/forcetot"].set)
	 dump.write_forcestot(actions.dumpnames[0]) ;
       if (actions["wallforce-by-angle"].set)
         dump.write_wallforce(actions.dumpnames[0]) ;
       }
     }

actions.write_history(1, argc, argv) ;
printf("\n") ; // Plus joli à la fin...
std::exit(EXIT_SUCCESS) ;
}

//----------------------------
Actions::Actions() : Radius(0.00075), Rhograin(2500), D(0.005), R(0.0025), L(0.03), Lsimu(0.05), Dsimu(0.015), numdump(1)
{}

//---------------------------
void Actions::initialize(void) 
{
int dep[10] ; 
char * args [10] ; 

actions.new_arg ("writing", "Paramètres pour l'écriture des fichiers de sorti (cf. la documentation)", 0, 0) ; 

actions.new_arg ("vtk", "le dump est au format vtk", 0, 0) ; 
dep[0]=actions["vtk"].id ; 
actions.new_arg ("separe", "coupe un vtk à chaque pas de temps", 0, 1, dep) ;
actions.new_arg ("w/forcetot", "écrit un fichier dump.forces.txt contenant la force totale à chaque pas de temps", 0, 0) ;

actions.new_arg ("w/coupletot", "écrit un fichier dump.forces.txt contenant le couple total à chaque pas de temps. \
Avec vtk : a partir des données dans un vtk. \
Avec Chainforce : en comparant les écart de force propre des grains dans le ldump avec la somme des chaines de forces par grains. ", 0, 0) ;

actions.new_arg ("w/otige", "Retire la tige de support dans le calcul du couple pour le cas où on l'a simulée", 0, 1, dep) ;
actions.new_arg ("group-triangles" , "Fait la moyenne des triangles de même normale dans un mesh", 0, 1, dep) ;
args[0]=(char *) "anglebystep" ; 
actions.new_arg ("anglebystep", "si le mesh est en rotation autour du centre indiqué, angle de rotation effectué en 1 pas de step (en degrés)", 1, args, 0) ;
actions.new_arg ("recode", "recode le vtk en enlevant des signes - en vadrouille pour comparer avant/après compression", 0, 1, dep) ;
actions.new_arg ("norebuild", "Ne tente pas de reconstruire des données manquantes. Plutôt utilisé pour les vtk dans la cadre de Liggghts 1 (--v1)", 0, 0) ;

actions.new_arg ("cp", "identifie un dump compressé", 0, 0) ;
dep[0]=actions["cp"].id ;  
actions.new_arg ("uncompress", "décompresse un dump compressé", 0, 1, dep) ;

args[0]=(char *) "nbbox_x" ; args[1]=(char *) "nbbox_y" ; args[2]=(char *) "nbbox_z" ; 
actions.new_arg ("coarse-graining", "extrait des vtk avec coarse graining en vitesse d'un dump. Les params sont le nb de boites en x, y, z.",3, args, 0) ;
actions.new_arg ("coarse-graining-basic", "Extrait les vitesses coarsed moyennes (fonctionne pour type non granulaires aussi). Les params sont le nb de boites en x, y, z.",3, args, 0) ;
dep[0]=actions["coarse-graining"].id ; args[0]=(char *) "soustraire" ; 
actions.new_arg ("substract", "soustrait la valeur donnée à la valeur x du champ de vitesse", 1,args, 1, dep) ;
actions.new_arg ("set-vy-zero", "annule la composante y de la vitesse (pour tracer les lignes de courant ...)", 0, 1, dep) ;
args[0]=(char *) "box_xmin" ; args[1]=(char *) "box_xmax" ; args[2]=(char *) "box_ymin" ; args[3]=(char *) "box_ymax" ; args[4]=(char *) "box_zmin" ; args[5]=(char *) "box_zmax" ;
actions.new_arg ("use-box", "ne pas utiliser la boîte de la simu mais une boîte perso", 6,args, 1, dep) ;
actions.new_arg ("winboxyper", "utiliser un fenêtrage box precis grace a une périodicité en y", 0, 1, dep) ;
args[0]=(char *) "sigma" ; 
actions.new_arg ("wingauss", "utiliser un fenêtrage gaussien (sigma=-1 : le calculer automatiquement)", 1,args, 1, dep) ;
args[0]=(char *) "sigmax" ; args[1]=(char *) "sigmay" ; args[2]=(char *) "sigmaz" ; 
actions.new_arg ("wingauss3D", "utiliser un fenêtrage gaussien avec 3 sigma differents (sigmax|y|z=-1 : le calculer automatiquement)", 3,args, 1, dep) ;
actions.new_arg("w/kinetic", "calcul aussi la partie cinétique du tenseur des contraintes", 0, 1, dep) ;
actions.new_arg("pressureFgrain", "Calculer un vecteur de pression à partir de la force sur chaque grain", 0, 1, dep) ;
args[0]=(char *) "nbbox_x" ; args[1]=(char *) "nbbox_y" ;
actions.new_arg ("surface", "trouve la surface libre haute avec l'échantillonnage donné en x et y", 2, args, 0) ;
actions.new_arg ("surface2D", "trouve la surface libre haute en yavec l'échantillonnage donné en x ", 1, args, 0) ;
actions.new_arg ("surfaces", "trouve les surfaces libres haute & basse avec l'échantillonnage donné en x et y", 2, args, 0) ;

actions.new_arg ("dumpall", "charger un dump en mémoire en entier", 0, 0) ;
args[0]=(char *) "downsampling" ; 
actions.new_arg ("downsampling", "n'extraire qu'un timestep sur n", 1 ,args, 0) ;
args[0]=(char *) "timestep" ;
actions.new_arg ("dstminmax", "Calculer la distance minimale et maximale entre atome au timestep ts", 1, args, 0) ; 
args[0]=(char *) "extract_deb" ; args[1]=(char *) "extract_fin" ;
actions.new_arg ("extract", "n'extraire que les timestep entre arg1 et arg2", 2 ,args, 0) ;
actions.new_arg ("mean", "ne pas faire de dump par pas de tps mais seulment des moyenne", 0, 0) ;
args[0]=(char *) "xcyl" ; args[1]=(char *) "zcyl" ; args[2]=(char *) "nbbox_theta" ; args[3]=(char *) "sigma" ;
actions.new_arg ("wallforce-by-angle", "Pour des interactions ycylindre-grains,calcul les fprces en fonction de l'angle. arg1=posx, arg2=posz, arg3=discretisation en angle, arg4=sigma en degré pour moyennage gaussien (si =0 moyenne créneau) ", 4, args, 0) ;

args[0]=(char *) "timestep" ; 
actions.new_arg ("dump2restart", "Ecrit un fichier restart pour charger des atomes dans liggghts", 1, args, 0) ; 
actions.new_arg ("dump2vtk", "transforme un dump en vtk séparés", 0, 0) ;
dep[0]=actions["dump2vtk"].id ;
actions.new_arg ("w/speed", "ajoute les données de vitesse au dump2vtk", 0, 1, dep) ;
actions.new_arg ("w/force", "ajoute les forces au dump2vtk", 0, 1, dep) ;
actions.new_arg ("w/id", "ajoute les numéros d'identification au dump2vtk", 0, 1, dep) ;
actions.new_arg ("w/rayon", "ajoute les rayons au dump2vtk", 0, 1, dep) ;
actions.new_arg ("w/masse", "ajoute les masses au dump2vtk", 0, 1, dep) ;
actions.new_arg ("dump2vtk", "transforme un dump en vtk séparés", 0, 0) ;
actions.new_arg ("compress", "compresse un dump ou un vtk ou un chainforce dump (dans ce cas, mettre un null en avant-dernier argument !!!)", 0, 0) ; 
actions.new_arg ("filter", "filtre les données avec l'argument suivant entre gillemets. Chaque opération est séparé par un point-virgule (cf. examples ailleurs TODO)", 0, 0) ;
actions.new_arg ("reechantillonner", "Réécris le dump atomique en modifiant si besoin l'échantillonnage et les timestep de départ et de fin.", 0,0)  ;
// Pour filter : cout << "\t\t\t Ex : \"x<3.25;vx<vz;id::sort::null\n\n" ;

actions.new_arg ("chainforce", "s'occupe des chaines de force. ATTENTION : l'avant dernier argument doit être le dump des positions, le dernier le dump des chaines de forces.", 0, 0) ;
dep[0]=actions["chainforce"].id ;
args[0]=(char *) "xcyl" ; args[1]=(char *) "zcyl" ; args[2]=(char *) "rayon" ;
actions.new_arg ("wallchainforce", "utilise un dump externe pour les liaisons grains-murs. L'antépénultième argument est alors le dump de wallforce", 3, args , 1, dep) ;
args[0]=(char *) "cutoff" ;
actions.new_arg("clone-periodic-chain", "copie les chaines de force traversant les parois periodiques (pas pour cylperiodic !)", 0, 1, dep) ;
actions.new_arg("cutoff", "ne garde que les n percent de chaînes de force de plus grande magnitude", 1, args, 1, dep) ;
actions.new_arg("noperiodicity", "les chaines de forces n'indiquent pas la periodicité (LIGGHTS version < 1.4.6)", 0, 1, dep) ;
actions.new_arg("v1", "modifie les parametres de PostProcessing pour la compatibilité avec Liggghts v1.x.x. -> autoset --noperiodicity", 0,0) ;
args[0]=(char *) "id" ; args[1]=(char *) "nbbox_theta" ; args[2]=(char *) "sigma" ;
actions.new_arg("grainforce-by-angle", "répartition angulaire des forces sur un grain", 3, args, 1, dep) ;
actions.new_arg("grainforce", "répartition angulaire des forces sur un grain", 1, args, 1, dep) ;
actions.new_arg("grain-rayon-around", "répartition des rayons autour d'un grain", 1, args, 1, dep) ;
dep[0]=actions["coarse-graining"].id ; 
actions.new_arg("is2D", "indique qu'il s'agit d'un coarse 2D", 0, 1, dep) ;
dep[1]=actions["chainforce"].id ; 
actions.new_arg("noatmcoarse", "ne pas effectuer le coarse atomique", 0, 2, dep) ;
actions.new_arg("wincreneau", "Moyenner sur une fenetre creneau", 0, 1, dep) ;
actions.new_arg("iscylperiodic", "Dans le cas où on ne simule qu'1/4 de la boîte (x+, y+, z) ; utilisé en conjonction avec w/coupletot et coarse-graining",0,0) ;
args[0]=(char *) "valeur" ;
actions.new_arg("setrayon", "Fixe le rayon des atomes", 1, args, 0) ; 
actions.new_arg("setdensite", "Fixe la densité des atomes", 1, args, 0) ; 
actions.new_arg("nofileerror", "Rend silencieuses les erreurs de lecture de fichier", 0, 0);
actions.new_arg("clean", "Nettoie des fichiers vtk et tmp avant tout calcul.", 0, 0);
actions.new_arg("help", "Affiche tous les arguments possibles et sort.", 0, 0);
actions.new_arg("version", "Indique la date de compilation.", 0, 0);
actions.new_arg("teststress" , "Génére des forces par triangle idéales pour tester",0,0) ; 
}

//---------------------------
void Actions::disp_progress(void)
{
pthread_t progress ;
pthread_create (&progress, NULL, progression, NULL);
cout << "\n\n" ; fflush(stdout) ; 
}

void * progression (void * rien)
{
while (actions.valeur/actions.total<0.99)
  {
  cout << setw(5) << setiosflags(ios::fixed) <<setprecision(1) << actions.valeur/actions.total*100. << "%" ; fflush(stdout) ; 
  sleep(1) ; 
  cout << "\b\b\b\b\b\b" ; fflush(stdout) ; 
  }
return NULL ;
}

void Actions::clean(string chemin)
{
char reponse ; 
char commande[1000] ; 
size_t pos ; 

cout << "!! Attention : les fichiers .vtk et .tmp du répertoire où se trouve le dump seront supprimés avant toute opération.\nÊtes-vous sûr de vouloir cela ([Yy | Nn]) ? \n" ;
cin  >> reponse ; 

if (reponse=='Y' || reponse=='y')
  {
  pos=chemin.find_last_of("/\\");
  if (pos==string::npos)
     {
     system("rm *.tmp ; rm *.vtk ;") ; 
     }
  else
     {
     chemin=chemin.substr(0,pos+1) ; 
     sprintf(commande,"rm %s*.vtk ; rm %s*.tmp", chemin.c_str(),chemin.c_str()) ;
     system(commande) ; 
     }
  }

}

//===========================================================
int Actions::new_arg (string commande, string description, int nb_args, int nb_dep)
{ if (nb_args==0 && nb_dep==0)
     return (new_arg (commande, description, 0, (char **) NULL, 0, (int *) NULL)) ;
  else
     cout << "ERR : il manque des arguments au nouvel argument " << commande ; 
return 1 ;
}
int Actions::new_arg (string commande, string description, int nb_args, char * noms_args[], int nb_dep)
{
if (nb_dep==0)
   return (new_arg(commande, description, nb_args, noms_args, 0, (int *)NULL)) ;
else
   cout << "ERR : il manque des arguments au nouvel argument " << commande ;
return 1 ;
}
int Actions::new_arg (string commande, string description, int nb_args, int nb_dep, int id_dep[])
{
if (nb_args==0)
   return (new_arg (commande, description, 0, (char **) NULL, nb_dep, id_dep)) ;
else
   cout << "ERR : il manque des arguments au nouvel argument " << commande ;
return 1 ;
}
//----------------------------------------------------------
int Actions::new_arg (string commande, string description, int nb_args, char * noms_args[], int nb_dep, int id_dep[])
{
int i ; 
Arguments tmp ; 

tmp.set=false ; 
tmp.commande=commande ; 
tmp.description=description ;
if (nb_args>0)
   {
   tmp.params.resize(nb_args, 0.0) ; 
   for (i=0 ; i<nb_args ; i++)
    {
    tmp.p_names.push_back(noms_args[i]) ; 
    }
   }
if (nb_dep>0)
   {
   for (i=0 ; i<nb_dep ; i++)
       {tmp.dependances.push_back(id_dep[i]) ;}
   }
actions.arguments.push_back(tmp) ; 
actions.arguments[actions.arguments.size()-1].id=actions.arguments.size() ; 
return (actions.arguments[actions.arguments.size()-1].id) ; 
}
//---------------------------------------------------------
Arguments & Actions::operator[] (string name)
{
unsigned int i ;
for (i=0 ; i<arguments.size() ; i++)
    {
    if(arguments[i].commande==name) return arguments[i] ; 
    } 
cout << "WARN : Impossible de trouver un argument correspondant à la string " << name ;
Arguments * null_arg ;
null_arg=new Arguments ; 
return (*null_arg); 
}
//-------------------------------------------------------
double Arguments::operator[] (string name)
{
unsigned int i ;
for (i=0 ; i<p_names.size() ; i++)
    {
    if (p_names[i]==name) return params[i] ; 
    }
cout << "WARN : Impossible de trouver un paramètre correspondant à la string " << name ;
return -1 ; 
}
//------------------------------------------------------
int Actions::parse_args (int argc, char * argv[])
{
int i, j ; string commande ;
for (i=1; i<argc ; i++)
    {
    commande=argv[i] ; 
    if (commande[0]!='-' || commande[1]!='-')
    {actions.dumpnames.insert(actions.dumpnames.begin(),commande) ; continue ;}
    
    commande.erase(0,2) ; 
 
    if (actions[commande].id==-1)  {DISP_Warn("WARN: argument de ligne de commande inconnu : ") ; printf("%s\n", commande.c_str()) ; continue ; }
    actions[commande].set=true ; 

    if (commande ==  "filter") 
       {
       Filter filtre_tmp ; 
       DISP_Warn ("NB : Filter est une commande fournie sans garantie d'être correcte.\n") ;
       actions.filtre_global=filtre_tmp.parse_arg(argv[i+1]) ; 
       filtre_tmp.disp(actions.filtre_global) ;  
       i++ ; continue ; 
       }
    if (commande ==  "writing") 
       {
       DISP_Info ("L'argument writing est encore en phase de test.\n") ;
       actions.ecrire.parse(argv[i+1]) ; 
       actions.ecrire.init=true ; 
       i++ ; continue ; 
       }          
    for (j=0 ; j<(int)actions[commande].params.size() ; j++)
        {sscanf(argv[i+j+1], "%lf", &(actions[commande].params[j])) ; }
    i+=actions[commande].params.size() ; 

    if (actions[commande].commande=="chainforce")     actions.numdump++ ; 
    if (actions[commande].commande=="wallchainforce") actions.numdump++ ;
    }

if (check_dependences()>0)
   std::exit(EXIT_FAILURE) ;
return 1 ;
}
//----------------------------------------------------
int Actions::parse_args_fromfile (void)
{
char buffer[5000] ; int i=0, j, p1 ;   
char ** argv ; int argc=0 ; int change ; 
// Si cin n'est pas un terminal, on le considère comme un fichier d'argument
if (!isatty(fileno(stdin)))
{
  DISP_Info ("Lecture des arguments depuis l'entrée standard ...") ; 
  while (!cin.eof())
    {
     cin.read(buffer+i, 1);
     if (cin.eof())
          *(buffer+i)=0 ; 
    i++ ; if (i>5000) DISP_Err("Buffer trop petit pour l'entree standard") ; 
    }
  // Splitting
  p1=0 ; change=0 ; 
  argc=1 ; // Le premier argument n'est pas utilisé (dans la ligne de commande, c'est le nom du programme)
  argv=(char **) malloc(argc*sizeof(char*)) ; //argv[0]=NULL ; 
  for (j=0 ; j<i ; j++)
  {
    if (buffer[j]==' ' || buffer[j]=='\n' || buffer[j]==0 || buffer[j]=='\t')
    {
      if (change==1) 
      {
	argc++ ; 
	argv=(char **) realloc(argv, argc*sizeof(char*)) ;
	argv[argc-1]=buffer+p1 ; 
	buffer[j]=0 ;
	change=0 ; 
      }
    }
    else
    {
      if (change==0) {change=1 ; p1=j ; }
    }
  }
  parse_args(argc, argv) ;  
}
return 1 ; 
}

//-----------------------------------------------------
int Actions::copyarg (string from, string to)
{
int id1, id2 ; unsigned int i ;
for (i=0 ; i<arguments.size() ; i++)
    {
    if(arguments[i].commande==from) id1=i ;
    if(arguments[i].commande==to) id2=i ;
    }

arguments[id2].set=arguments[id1].set ;
arguments[id2].params=arguments[id1].params ;

for (i=0 ; i<arguments[id2].p_names.size() ; i++)
	{if (arguments[id2].p_names[i]!=arguments[id1].p_names[i]) DISP_Warn("Les paramètres des arguments ne sont pas les mêmes, la copie est plus que discutable ...") ; }

return 0 ;
}

//-----------------------------------------------------
int Actions::check_dependences (void)
{
// TODO : il faudrait tester que l'on a pas de boucle dans les dépendances. Mais j'ai la flemme de le programmer maintenant et c'est pas si simple non plus ...
unsigned int i, j ;
int err=0 ;
for (i=0 ; i<arguments.size() ; i++)
 {
 if (arguments[i].set)
  { 
  for (j=0 ; j<arguments[i].dependances.size() ; j++)
      {
      if (arguments[arguments[i].dependances[j]-1].set==false)
         {cout << "ERR : l'argument "<< arguments[i].commande << " nécessite l'argument " << arguments[arguments[i].dependances[j]].commande << ".\n" ; err++ ; }
      }
  }
 }
return err ; 
}
//-----------------------------------------------------
void Actions::aide (void) //TODO
{
unsigned int i, j ;

for (i=0 ; i<arguments.size() ; i++)
{
	cout << "\n\t[" << arguments[i].id << "]" ;
	cout << "--" << arguments[i].commande << " " ;
	for (j=0 ; j<arguments[i].p_names.size() ; j++)
        {cout << arguments[i].p_names[j] << " " ; }
	cout << ":\n\t\t" << arguments[i].description ;
	if (arguments[i].dependances.size()>0)
	{cout << "\n\t\tDep : " ; for (j=0 ; j<arguments[i].dependances.size() ; j++) {cout <<"|"<<arguments[i].dependances[j];} cout <<"|" ;}
}
cout << "\n\n" ;
}

//----------------------------------------------------
void Actions::write_history (int todo, int argc, char * argv[])
{
time_t t;
static time_t told ;
int i, j ;
struct tm * timeinfo;
FILE *log ;
char *path=NULL;
size_t size=0;

time(&t);
timeinfo = localtime (&t);

log=fopen("/Users/FGuillard/bin/PostProcessing.log", "a") ;
if (log==NULL) {printf("WARN : impossible d'enregistrer un log de lancement de PostProcessing") ; return ; }

if (todo==0)
  {
  path=getcwd(path,size);
  fprintf(log, "%s", ctime(&t)) ;
  fprintf(log, "\t%s compilé le %s\n", argv[0], __DATE__) ;
  fprintf(log, "\t Travaille dans %s\n\t", path) ;
  for (i=0 ; i<actions.arguments.size() ; i++)
  {
   if (actions.arguments[i].set)
   {
    fprintf(log, "--%s ",  actions.arguments[i].commande.c_str()) ; 
    for (j=0 ; j<actions.arguments[i].params.size() ; j++)
      fprintf(log, "%f ", actions.arguments[i].params[j]) ; 
   }
  }
  for (i=actions.numdump-1 ; i>=0 ; i--)
    fprintf(log, "%s ", actions.dumpnames[i].c_str()) ; 
  fprintf(log, "\n") ;
  told=t ;
  }
else if (todo==1)
  {
  fprintf(log, "Fin normale (durée %ld:%ld:%ld).\n\n", (t-told)/3600, ((t-told)%3600)/60, (((t-told)%3600)%60)) ;
  }
fclose(log) ;
}








